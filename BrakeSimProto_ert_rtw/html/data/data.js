var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"BrakeSimProto","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"U:\\Documents\\445\\BrakeSimProto_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'BrakeSimProto'.\r\n *\r\n * Model version                  : 1.15\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Apr 18 17:14:11 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"BrakeSimProto.h\"             /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(rtM, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  BrakeSimProto_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  BrakeSimProto_initialize();\r\n\r\n  /* Simulating the model step behavior (in non real-time) to\r\n   *  simulate model behavior at stop time.\r\n   */\r\n  while ((rtmGetErrorStatus(rtM) == (NULL)) && !rtmGetStopRequested(rtM)) {\r\n    rt_OneStep();\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"BrakeSimProto.c","type":"source","group":"model","path":"U:\\Documents\\445\\BrakeSimProto_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: BrakeSimProto.c\r\n *\r\n * Code generated for Simulink model 'BrakeSimProto'.\r\n *\r\n * Model version                  : 1.15\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Apr 18 17:14:11 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"BrakeSimProto.h\"\r\n#include \"rtwtypes.h\"\r\n\r\n/* Private macros used by the generated code to access rtModel */\r\n#ifndef rtmIsMajorTimeStep\r\n#define rtmIsMajorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MAJOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmIsMinorTimeStep\r\n#define rtmIsMinorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MINOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmSetTPtr\r\n#define rtmSetTPtr(rtm, val)           ((rtm)->Timing.t = (val))\r\n#endif\r\n\r\n/* Continuous states */\r\nX rtX;\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL rtM_;\r\nRT_MODEL *const rtM = &rtM_;\r\n\r\n/* private model entry point functions */\r\nextern void BrakeSimProto_derivatives(void);\r\n\r\n/*\r\n * This function updates continuous states using the ODE4 fixed-step\r\n * solver algorithm\r\n */\r\nstatic void rt_ertODEUpdateContinuousStates(RTWSolverInfo *si )\r\n{\r\n  time_T t = rtsiGetT(si);\r\n  time_T tnew = rtsiGetSolverStopTime(si);\r\n  time_T h = rtsiGetStepSize(si);\r\n  real_T *x = rtsiGetContStates(si);\r\n  ODE4_IntgData *id = (ODE4_IntgData *)rtsiGetSolverData(si);\r\n  real_T *y = id->y;\r\n  real_T *f0 = id->f[0];\r\n  real_T *f1 = id->f[1];\r\n  real_T *f2 = id->f[2];\r\n  real_T *f3 = id->f[3];\r\n  real_T temp;\r\n  int_T i;\r\n  int_T nXc = 3;\r\n  rtsiSetSimTimeStep(si,MINOR_TIME_STEP);\r\n\r\n  /* Save the state values at time t in y, we'll use x as ynew. */\r\n  (void) memcpy(y, x,\r\n                (uint_T)nXc*sizeof(real_T));\r\n\r\n  /* Assumes that rtsiSetT and ModelOutputs are up-to-date */\r\n  /* f0 = f(t,y) */\r\n  rtsiSetdX(si, f0);\r\n  BrakeSimProto_derivatives();\r\n\r\n  /* f1 = f(t + (h/2), y + (h/2)*f0) */\r\n  temp = 0.5 * h;\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + (temp*f0[i]);\r\n  }\r\n\r\n  rtsiSetT(si, t + temp);\r\n  rtsiSetdX(si, f1);\r\n  BrakeSimProto_step();\r\n  BrakeSimProto_derivatives();\r\n\r\n  /* f2 = f(t + (h/2), y + (h/2)*f1) */\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + (temp*f1[i]);\r\n  }\r\n\r\n  rtsiSetdX(si, f2);\r\n  BrakeSimProto_step();\r\n  BrakeSimProto_derivatives();\r\n\r\n  /* f3 = f(t + h, y + h*f2) */\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + (h*f2[i]);\r\n  }\r\n\r\n  rtsiSetT(si, tnew);\r\n  rtsiSetdX(si, f3);\r\n  BrakeSimProto_step();\r\n  BrakeSimProto_derivatives();\r\n\r\n  /* tnew = t + h\r\n     ynew = y + (h/6)*(f0 + 2*f1 + 2*f2 + 2*f3) */\r\n  temp = h / 6.0;\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + temp*(f0[i] + 2.0*f1[i] + 2.0*f2[i] + f3[i]);\r\n  }\r\n\r\n  rtsiSetSimTimeStep(si,MAJOR_TIME_STEP);\r\n}\r\n\r\n/* Model step function */\r\nvoid BrakeSimProto_step(void)\r\n{\r\n  real_T rtb_DataTypeConversion2;\r\n  if (rtmIsMajorTimeStep(rtM)) {\r\n    /* set solver stop time */\r\n    rtsiSetSolverStopTime(&rtM->solverInfo,((rtM->Timing.clockTick0+1)*\r\n      rtM->Timing.stepSize0));\r\n  }                                    /* end MajorTimeStep */\r\n\r\n  /* Update absolute time of base rate at minor time step */\r\n  if (rtmIsMinorTimeStep(rtM)) {\r\n    rtM->Timing.t[0] = rtsiGetT(&rtM->solverInfo);\r\n  }\r\n\r\n  /* Fcn: '<Root>/Relative Slip Estimation' incorporates:\r\n   *  Inport: '<Root>/&#x3C9;_v'\r\n   *  Inport: '<Root>/&#x3C9;_w'\r\n   */\r\n  rtDW.slp = 1.0 - rtU._w / ((real_T)(rtU._v == 0.0) * 2.2204460492503131e-16 +\r\n    rtU._v);\r\n\r\n  /* Sum: '<Root>/Sum' incorporates:\r\n   *  Inport: '<Root>/Desired Relative Slip'\r\n   */\r\n  rtb_DataTypeConversion2 = rtU.DesiredRelativeSlip - rtDW.slp;\r\n\r\n  /* Sum: '<S2>/Sum' incorporates:\r\n   *  Constant: '<S2>/Constant'\r\n   *  RelationalOperator: '<S2>/Relational Operator'\r\n   *  RelationalOperator: '<S2>/Relational Operator1'\r\n   */\r\n  rtDW.Sum = (rtb_DataTypeConversion2 > 0.0) - (rtb_DataTypeConversion2 < 0.0);\r\n\r\n  /* Outport: '<Root>/Motor Input' */\r\n  rtY.MotorInput = rtDW.Sum;\r\n\r\n  /* Integrator: '<S1>/Brake pressure' */\r\n  /* Limited  Integrator  */\r\n  if (rtX.Brakepressure_CSTATE >= 1500.0) {\r\n    rtX.Brakepressure_CSTATE = 1500.0;\r\n  } else if (rtX.Brakepressure_CSTATE <= 0.0) {\r\n    rtX.Brakepressure_CSTATE = 0.0;\r\n  }\r\n\r\n  /* End of Integrator: '<S1>/Brake pressure' */\r\n\r\n  /* TransferFcn: '<S1>/Motor Actuation Lag' */\r\n  rtDW.MotorActuationLag = 10000.0 * rtX.MotorActuationLag_CSTATE;\r\n\r\n  /* Gain: '<Root>/Wheel Radius' incorporates:\r\n   *  Inport: '<Root>/&#x3C9;_v'\r\n   */\r\n  rtDW.WheelRadius = 0.9 * rtU._v;\r\n  if (rtmIsMajorTimeStep(rtM)) {\r\n    rt_ertODEUpdateContinuousStates(&rtM->solverInfo);\r\n\r\n    /* Update absolute time for base rate */\r\n    /* The \"clockTick0\" counts the number of times the code of this task has\r\n     * been executed. The absolute time is the multiplication of \"clockTick0\"\r\n     * and \"Timing.stepSize0\". Size of \"clockTick0\" ensures timer will not\r\n     * overflow during the application lifespan selected.\r\n     */\r\n    ++rtM->Timing.clockTick0;\r\n    rtM->Timing.t[0] = rtsiGetSolverStopTime(&rtM->solverInfo);\r\n\r\n    {\r\n      /* Update absolute timer for sample time: [0.001s, 0.0s] */\r\n      /* The \"clockTick1\" counts the number of times the code of this task has\r\n       * been executed. The resolution of this integer timer is 0.001, which is the step size\r\n       * of the task. Size of \"clockTick1\" ensures timer will not overflow during the\r\n       * application lifespan selected.\r\n       */\r\n      rtM->Timing.clockTick1++;\r\n    }\r\n  }                                    /* end MajorTimeStep */\r\n}\r\n\r\n/* Derivatives for root system: '<Root>' */\r\nvoid BrakeSimProto_derivatives(void)\r\n{\r\n  XDot *_rtXdot;\r\n  boolean_T lsat;\r\n  boolean_T usat;\r\n  _rtXdot = ((XDot *) rtM->derivs);\r\n\r\n  /* Derivatives for Integrator: '<Root>/Integrator' */\r\n  _rtXdot->Integrator_CSTATE = rtDW.WheelRadius;\r\n\r\n  /* Derivatives for Integrator: '<S1>/Brake pressure' */\r\n  lsat = (rtX.Brakepressure_CSTATE <= 0.0);\r\n  usat = (rtX.Brakepressure_CSTATE >= 1500.0);\r\n  if (((!lsat) && (!usat)) || (lsat && (rtDW.MotorActuationLag > 0.0)) || (usat &&\r\n       (rtDW.MotorActuationLag < 0.0))) {\r\n    _rtXdot->Brakepressure_CSTATE = rtDW.MotorActuationLag;\r\n  } else {\r\n    /* in saturation */\r\n    _rtXdot->Brakepressure_CSTATE = 0.0;\r\n  }\r\n\r\n  /* End of Derivatives for Integrator: '<S1>/Brake pressure' */\r\n\r\n  /* Derivatives for TransferFcn: '<S1>/Motor Actuation Lag' */\r\n  _rtXdot->MotorActuationLag_CSTATE = -100.0 * rtX.MotorActuationLag_CSTATE;\r\n  _rtXdot->MotorActuationLag_CSTATE += rtDW.Sum;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid BrakeSimProto_initialize(void)\r\n{\r\n  /* Registration code */\r\n  {\r\n    /* Setup solver object */\r\n    rtsiSetSimTimeStepPtr(&rtM->solverInfo, &rtM->Timing.simTimeStep);\r\n    rtsiSetTPtr(&rtM->solverInfo, &rtmGetTPtr(rtM));\r\n    rtsiSetStepSizePtr(&rtM->solverInfo, &rtM->Timing.stepSize0);\r\n    rtsiSetdXPtr(&rtM->solverInfo, &rtM->derivs);\r\n    rtsiSetContStatesPtr(&rtM->solverInfo, (real_T **) &rtM->contStates);\r\n    rtsiSetNumContStatesPtr(&rtM->solverInfo, &rtM->Sizes.numContStates);\r\n    rtsiSetNumPeriodicContStatesPtr(&rtM->solverInfo,\r\n      &rtM->Sizes.numPeriodicContStates);\r\n    rtsiSetPeriodicContStateIndicesPtr(&rtM->solverInfo,\r\n      &rtM->periodicContStateIndices);\r\n    rtsiSetPeriodicContStateRangesPtr(&rtM->solverInfo,\r\n      &rtM->periodicContStateRanges);\r\n    rtsiSetErrorStatusPtr(&rtM->solverInfo, (&rtmGetErrorStatus(rtM)));\r\n    rtsiSetRTModelPtr(&rtM->solverInfo, rtM);\r\n  }\r\n\r\n  rtsiSetSimTimeStep(&rtM->solverInfo, MAJOR_TIME_STEP);\r\n  rtM->intgData.y = rtM->odeY;\r\n  rtM->intgData.f[0] = rtM->odeF[0];\r\n  rtM->intgData.f[1] = rtM->odeF[1];\r\n  rtM->intgData.f[2] = rtM->odeF[2];\r\n  rtM->intgData.f[3] = rtM->odeF[3];\r\n  rtM->contStates = ((X *) &rtX);\r\n  rtsiSetSolverData(&rtM->solverInfo, (void *)&rtM->intgData);\r\n  rtsiSetIsMinorTimeStepWithModeChange(&rtM->solverInfo, false);\r\n  rtsiSetSolverName(&rtM->solverInfo,\"ode4\");\r\n  rtmSetTPtr(rtM, &rtM->Timing.tArray[0]);\r\n  rtM->Timing.stepSize0 = 0.001;\r\n\r\n  /* InitializeConditions for Integrator: '<Root>/Integrator' */\r\n  rtX.Integrator_CSTATE = 0.0;\r\n\r\n  /* InitializeConditions for Integrator: '<S1>/Brake pressure' */\r\n  rtX.Brakepressure_CSTATE = 0.0;\r\n\r\n  /* InitializeConditions for TransferFcn: '<S1>/Motor Actuation Lag' */\r\n  rtX.MotorActuationLag_CSTATE = 0.0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"BrakeSimProto.h","type":"header","group":"model","path":"U:\\Documents\\445\\BrakeSimProto_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: BrakeSimProto.h\r\n *\r\n * Code generated for Simulink model 'BrakeSimProto'.\r\n *\r\n * Model version                  : 1.15\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Apr 18 17:14:11 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_BrakeSimProto_h_\r\n#define RTW_HEADER_BrakeSimProto_h_\r\n#ifndef BrakeSimProto_COMMON_INCLUDES_\r\n#define BrakeSimProto_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n#endif                                 /* BrakeSimProto_COMMON_INCLUDES_ */\r\n\r\n#include <string.h>\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((rtm)->Timing.stopRequestedFlag)\r\n#endif\r\n\r\n#ifndef rtmSetStopRequested\r\n#define rtmSetStopRequested(rtm, val)  ((rtm)->Timing.stopRequestedFlag = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequestedPtr\r\n#define rtmGetStopRequestedPtr(rtm)    (&((rtm)->Timing.stopRequestedFlag))\r\n#endif\r\n\r\n#ifndef rtmGetT\r\n#define rtmGetT(rtm)                   (rtmGetTPtr((rtm))[0])\r\n#endif\r\n\r\n#ifndef rtmGetTPtr\r\n#define rtmGetTPtr(rtm)                ((rtm)->Timing.t)\r\n#endif\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM RT_MODEL;\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real_T slp;                          /* '<Root>/Relative Slip Estimation' */\r\n  real_T Sum;                          /* '<S2>/Sum' */\r\n  real_T MotorActuationLag;            /* '<S1>/Motor Actuation Lag' */\r\n  real_T WheelRadius;                  /* '<Root>/Wheel Radius' */\r\n} DW;\r\n\r\n/* Continuous states (default storage) */\r\ntypedef struct {\r\n  real_T Integrator_CSTATE;            /* '<Root>/Integrator' */\r\n  real_T Brakepressure_CSTATE;         /* '<S1>/Brake pressure' */\r\n  real_T MotorActuationLag_CSTATE;     /* '<S1>/Motor Actuation Lag' */\r\n} X;\r\n\r\n/* State derivatives (default storage) */\r\ntypedef struct {\r\n  real_T Integrator_CSTATE;            /* '<Root>/Integrator' */\r\n  real_T Brakepressure_CSTATE;         /* '<S1>/Brake pressure' */\r\n  real_T MotorActuationLag_CSTATE;     /* '<S1>/Motor Actuation Lag' */\r\n} XDot;\r\n\r\n/* State disabled  */\r\ntypedef struct {\r\n  boolean_T Integrator_CSTATE;         /* '<Root>/Integrator' */\r\n  boolean_T Brakepressure_CSTATE;      /* '<S1>/Brake pressure' */\r\n  boolean_T MotorActuationLag_CSTATE;  /* '<S1>/Motor Actuation Lag' */\r\n} XDis;\r\n\r\n#ifndef ODE4_INTG\r\n#define ODE4_INTG\r\n\r\n/* ODE4 Integration Data */\r\ntypedef struct {\r\n  real_T *y;                           /* output */\r\n  real_T *f[4];                        /* derivatives */\r\n} ODE4_IntgData;\r\n\r\n#endif\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real_T _w;                           /* '<Root>/&#x3C9;_w' */\r\n  real_T _v;                           /* '<Root>/&#x3C9;_v' */\r\n  real_T DesiredRelativeSlip;          /* '<Root>/Desired Relative Slip' */\r\n} ExtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T MotorInput;                   /* '<Root>/Motor Input' */\r\n} ExtY;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM {\r\n  const char_T *errorStatus;\r\n  RTWSolverInfo solverInfo;\r\n  X *contStates;\r\n  int_T *periodicContStateIndices;\r\n  real_T *periodicContStateRanges;\r\n  real_T *derivs;\r\n  XDis *contStateDisabled;\r\n  boolean_T zCCacheNeedsReset;\r\n  boolean_T derivCacheNeedsReset;\r\n  boolean_T CTOutputIncnstWithState;\r\n  real_T odeY[3];\r\n  real_T odeF[4][3];\r\n  ODE4_IntgData intgData;\r\n\r\n  /*\r\n   * Sizes:\r\n   * The following substructure contains sizes information\r\n   * for many of the model attributes such as inputs, outputs,\r\n   * dwork, sample times, etc.\r\n   */\r\n  struct {\r\n    int_T numContStates;\r\n    int_T numPeriodicContStates;\r\n    int_T numSampTimes;\r\n  } Sizes;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    uint32_T clockTick0;\r\n    time_T stepSize0;\r\n    uint32_T clockTick1;\r\n    SimTimeStep simTimeStep;\r\n    boolean_T stopRequestedFlag;\r\n    time_T *t;\r\n    time_T tArray[2];\r\n  } Timing;\r\n};\r\n\r\n/* Continuous states (default storage) */\r\nextern X rtX;\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/* Model entry point functions */\r\nextern void BrakeSimProto_initialize(void);\r\nextern void BrakeSimProto_step(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL *const rtM;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<Root>/Effective Wheel Weight' : Unused code path elimination\r\n * Block '<Root>/mu-slip friction curve' : Unused code path elimination\r\n * Block '<Root>/Control Toggle' : Eliminated nontunable gain of 1\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'BrakeSimProto'\r\n * '<S1>'   : 'BrakeSimProto/Motor Controller'\r\n * '<S2>'   : 'BrakeSimProto/Motor Controller/Bang-bang controller'\r\n * '<S3>'   : 'BrakeSimProto/Motor Controller/Brake Force Estimation'\r\n */\r\n#endif                                 /* RTW_HEADER_BrakeSimProto_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"U:\\Documents\\445\\BrakeSimProto_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'BrakeSimProto'.\r\n *\r\n * Model version                  : 1.15\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Apr 18 17:14:11 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-M\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};