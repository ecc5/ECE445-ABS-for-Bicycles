
ABS_Bicycle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000288c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002a24  08002a24  00003a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a3c  08002a3c  00004014  2**0
                  CONTENTS
  4 .ARM          00000008  08002a3c  08002a3c  00003a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a44  08002a44  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a44  08002a44  00003a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a48  08002a48  00003a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002a4c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000018  08002a60  00004018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08002a60  00004298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000490e  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001277  00000000  00000000  00008952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000478  00000000  00000000  00009bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000339  00000000  00000000  0000a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015746  00000000  00000000  0000a381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005ac0  00000000  00000000  0001fac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084b5c  00000000  00000000  00025587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa0e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001224  00000000  00000000  000aa128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000ab34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002a0c 	.word	0x08002a0c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08002a0c 	.word	0x08002a0c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_uldivmod>:
 8000ad4:	b953      	cbnz	r3, 8000aec <__aeabi_uldivmod+0x18>
 8000ad6:	b94a      	cbnz	r2, 8000aec <__aeabi_uldivmod+0x18>
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	bf08      	it	eq
 8000adc:	2800      	cmpeq	r0, #0
 8000ade:	bf1c      	itt	ne
 8000ae0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ae4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae8:	f000 b96a 	b.w	8000dc0 <__aeabi_idiv0>
 8000aec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af4:	f000 f806 	bl	8000b04 <__udivmoddi4>
 8000af8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <__udivmoddi4>:
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	9d08      	ldr	r5, [sp, #32]
 8000b0a:	460c      	mov	r4, r1
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d14e      	bne.n	8000bae <__udivmoddi4+0xaa>
 8000b10:	4694      	mov	ip, r2
 8000b12:	458c      	cmp	ip, r1
 8000b14:	4686      	mov	lr, r0
 8000b16:	fab2 f282 	clz	r2, r2
 8000b1a:	d962      	bls.n	8000be2 <__udivmoddi4+0xde>
 8000b1c:	b14a      	cbz	r2, 8000b32 <__udivmoddi4+0x2e>
 8000b1e:	f1c2 0320 	rsb	r3, r2, #32
 8000b22:	4091      	lsls	r1, r2
 8000b24:	fa20 f303 	lsr.w	r3, r0, r3
 8000b28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b2c:	4319      	orrs	r1, r3
 8000b2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b36:	fa1f f68c 	uxth.w	r6, ip
 8000b3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b42:	fb07 1114 	mls	r1, r7, r4, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb04 f106 	mul.w	r1, r4, r6
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x64>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b5a:	f080 8112 	bcs.w	8000d82 <__udivmoddi4+0x27e>
 8000b5e:	4299      	cmp	r1, r3
 8000b60:	f240 810f 	bls.w	8000d82 <__udivmoddi4+0x27e>
 8000b64:	3c02      	subs	r4, #2
 8000b66:	4463      	add	r3, ip
 8000b68:	1a59      	subs	r1, r3, r1
 8000b6a:	fa1f f38e 	uxth.w	r3, lr
 8000b6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b72:	fb07 1110 	mls	r1, r7, r0, r1
 8000b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7a:	fb00 f606 	mul.w	r6, r0, r6
 8000b7e:	429e      	cmp	r6, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x94>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b8a:	f080 80fc 	bcs.w	8000d86 <__udivmoddi4+0x282>
 8000b8e:	429e      	cmp	r6, r3
 8000b90:	f240 80f9 	bls.w	8000d86 <__udivmoddi4+0x282>
 8000b94:	4463      	add	r3, ip
 8000b96:	3802      	subs	r0, #2
 8000b98:	1b9b      	subs	r3, r3, r6
 8000b9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	b11d      	cbz	r5, 8000baa <__udivmoddi4+0xa6>
 8000ba2:	40d3      	lsrs	r3, r2
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	e9c5 3200 	strd	r3, r2, [r5]
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d905      	bls.n	8000bbe <__udivmoddi4+0xba>
 8000bb2:	b10d      	cbz	r5, 8000bb8 <__udivmoddi4+0xb4>
 8000bb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4608      	mov	r0, r1
 8000bbc:	e7f5      	b.n	8000baa <__udivmoddi4+0xa6>
 8000bbe:	fab3 f183 	clz	r1, r3
 8000bc2:	2900      	cmp	r1, #0
 8000bc4:	d146      	bne.n	8000c54 <__udivmoddi4+0x150>
 8000bc6:	42a3      	cmp	r3, r4
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xcc>
 8000bca:	4290      	cmp	r0, r2
 8000bcc:	f0c0 80f0 	bcc.w	8000db0 <__udivmoddi4+0x2ac>
 8000bd0:	1a86      	subs	r6, r0, r2
 8000bd2:	eb64 0303 	sbc.w	r3, r4, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	2d00      	cmp	r5, #0
 8000bda:	d0e6      	beq.n	8000baa <__udivmoddi4+0xa6>
 8000bdc:	e9c5 6300 	strd	r6, r3, [r5]
 8000be0:	e7e3      	b.n	8000baa <__udivmoddi4+0xa6>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	f040 8090 	bne.w	8000d08 <__udivmoddi4+0x204>
 8000be8:	eba1 040c 	sub.w	r4, r1, ip
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	fa1f f78c 	uxth.w	r7, ip
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb08 4416 	mls	r4, r8, r6, r4
 8000c02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c06:	fb07 f006 	mul.w	r0, r7, r6
 8000c0a:	4298      	cmp	r0, r3
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x11c>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x11a>
 8000c18:	4298      	cmp	r0, r3
 8000c1a:	f200 80cd 	bhi.w	8000db8 <__udivmoddi4+0x2b4>
 8000c1e:	4626      	mov	r6, r4
 8000c20:	1a1c      	subs	r4, r3, r0
 8000c22:	fa1f f38e 	uxth.w	r3, lr
 8000c26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c32:	fb00 f707 	mul.w	r7, r0, r7
 8000c36:	429f      	cmp	r7, r3
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x148>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x146>
 8000c44:	429f      	cmp	r7, r3
 8000c46:	f200 80b0 	bhi.w	8000daa <__udivmoddi4+0x2a6>
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	1bdb      	subs	r3, r3, r7
 8000c4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c52:	e7a5      	b.n	8000ba0 <__udivmoddi4+0x9c>
 8000c54:	f1c1 0620 	rsb	r6, r1, #32
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c5e:	431f      	orrs	r7, r3
 8000c60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c64:	fa04 f301 	lsl.w	r3, r4, r1
 8000c68:	ea43 030c 	orr.w	r3, r3, ip
 8000c6c:	40f4      	lsrs	r4, r6
 8000c6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c72:	0c38      	lsrs	r0, r7, #16
 8000c74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c78:	fbb4 fef0 	udiv	lr, r4, r0
 8000c7c:	fa1f fc87 	uxth.w	ip, r7
 8000c80:	fb00 441e 	mls	r4, r0, lr, r4
 8000c84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c88:	fb0e f90c 	mul.w	r9, lr, ip
 8000c8c:	45a1      	cmp	r9, r4
 8000c8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x1a6>
 8000c94:	193c      	adds	r4, r7, r4
 8000c96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c9a:	f080 8084 	bcs.w	8000da6 <__udivmoddi4+0x2a2>
 8000c9e:	45a1      	cmp	r9, r4
 8000ca0:	f240 8081 	bls.w	8000da6 <__udivmoddi4+0x2a2>
 8000ca4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca8:	443c      	add	r4, r7
 8000caa:	eba4 0409 	sub.w	r4, r4, r9
 8000cae:	fa1f f983 	uxth.w	r9, r3
 8000cb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cc2:	45a4      	cmp	ip, r4
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x1d2>
 8000cc6:	193c      	adds	r4, r7, r4
 8000cc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ccc:	d267      	bcs.n	8000d9e <__udivmoddi4+0x29a>
 8000cce:	45a4      	cmp	ip, r4
 8000cd0:	d965      	bls.n	8000d9e <__udivmoddi4+0x29a>
 8000cd2:	3b02      	subs	r3, #2
 8000cd4:	443c      	add	r4, r7
 8000cd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cda:	fba0 9302 	umull	r9, r3, r0, r2
 8000cde:	eba4 040c 	sub.w	r4, r4, ip
 8000ce2:	429c      	cmp	r4, r3
 8000ce4:	46ce      	mov	lr, r9
 8000ce6:	469c      	mov	ip, r3
 8000ce8:	d351      	bcc.n	8000d8e <__udivmoddi4+0x28a>
 8000cea:	d04e      	beq.n	8000d8a <__udivmoddi4+0x286>
 8000cec:	b155      	cbz	r5, 8000d04 <__udivmoddi4+0x200>
 8000cee:	ebb8 030e 	subs.w	r3, r8, lr
 8000cf2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cf6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cfa:	40cb      	lsrs	r3, r1
 8000cfc:	431e      	orrs	r6, r3
 8000cfe:	40cc      	lsrs	r4, r1
 8000d00:	e9c5 6400 	strd	r6, r4, [r5]
 8000d04:	2100      	movs	r1, #0
 8000d06:	e750      	b.n	8000baa <__udivmoddi4+0xa6>
 8000d08:	f1c2 0320 	rsb	r3, r2, #32
 8000d0c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d14:	fa24 f303 	lsr.w	r3, r4, r3
 8000d18:	4094      	lsls	r4, r2
 8000d1a:	430c      	orrs	r4, r1
 8000d1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d20:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d2c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d30:	0c23      	lsrs	r3, r4, #16
 8000d32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d36:	fb00 f107 	mul.w	r1, r0, r7
 8000d3a:	4299      	cmp	r1, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x24c>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d46:	d22c      	bcs.n	8000da2 <__udivmoddi4+0x29e>
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	d92a      	bls.n	8000da2 <__udivmoddi4+0x29e>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1a5b      	subs	r3, r3, r1
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d58:	fb08 3311 	mls	r3, r8, r1, r3
 8000d5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d60:	fb01 f307 	mul.w	r3, r1, r7
 8000d64:	42a3      	cmp	r3, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x276>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d70:	d213      	bcs.n	8000d9a <__udivmoddi4+0x296>
 8000d72:	42a3      	cmp	r3, r4
 8000d74:	d911      	bls.n	8000d9a <__udivmoddi4+0x296>
 8000d76:	3902      	subs	r1, #2
 8000d78:	4464      	add	r4, ip
 8000d7a:	1ae4      	subs	r4, r4, r3
 8000d7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d80:	e739      	b.n	8000bf6 <__udivmoddi4+0xf2>
 8000d82:	4604      	mov	r4, r0
 8000d84:	e6f0      	b.n	8000b68 <__udivmoddi4+0x64>
 8000d86:	4608      	mov	r0, r1
 8000d88:	e706      	b.n	8000b98 <__udivmoddi4+0x94>
 8000d8a:	45c8      	cmp	r8, r9
 8000d8c:	d2ae      	bcs.n	8000cec <__udivmoddi4+0x1e8>
 8000d8e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d92:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d96:	3801      	subs	r0, #1
 8000d98:	e7a8      	b.n	8000cec <__udivmoddi4+0x1e8>
 8000d9a:	4631      	mov	r1, r6
 8000d9c:	e7ed      	b.n	8000d7a <__udivmoddi4+0x276>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	e799      	b.n	8000cd6 <__udivmoddi4+0x1d2>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e7d4      	b.n	8000d50 <__udivmoddi4+0x24c>
 8000da6:	46d6      	mov	lr, sl
 8000da8:	e77f      	b.n	8000caa <__udivmoddi4+0x1a6>
 8000daa:	4463      	add	r3, ip
 8000dac:	3802      	subs	r0, #2
 8000dae:	e74d      	b.n	8000c4c <__udivmoddi4+0x148>
 8000db0:	4606      	mov	r6, r0
 8000db2:	4623      	mov	r3, r4
 8000db4:	4608      	mov	r0, r1
 8000db6:	e70f      	b.n	8000bd8 <__udivmoddi4+0xd4>
 8000db8:	3e02      	subs	r6, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	e730      	b.n	8000c20 <__udivmoddi4+0x11c>
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_idiv0>:
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <rt_ertODEUpdateContinuousStates>:
/*
 * This function updates continuous states using the ODE4 fixed-step
 * solver algorithm
 */
static void rt_ertODEUpdateContinuousStates(RTWSolverInfo *si )
{
 8000dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dc8:	b095      	sub	sp, #84	@ 0x54
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  time_T t = rtsiGetT(si);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  time_T tnew = rtsiGetSolverStopTime(si);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000de2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  time_T h = rtsiGetStepSize(si);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a1b      	ldr	r3, [r3, #32]
 8000dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dee:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  real_T *x = rtsiGetContStates(si);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ODE4_IntgData *id = (ODE4_IntgData *)rtsiGetSolverData(si);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  real_T *y = id->y;
 8000e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
  real_T *f0 = id->f[0];
 8000e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	623b      	str	r3, [r7, #32]
  real_T *f1 = id->f[1];
 8000e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	61fb      	str	r3, [r7, #28]
  real_T *f2 = id->f[2];
 8000e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	61bb      	str	r3, [r7, #24]
  real_T *f3 = id->f[3];
 8000e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	617b      	str	r3, [r7, #20]
  real_T temp;
  int_T i;
  int_T nXc = 3;
 8000e20:	2303      	movs	r3, #3
 8000e22:	613b      	str	r3, [r7, #16]
  rtsiSetSimTimeStep(si,MINOR_TIME_STEP);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]

  /* Save the state values at time t in y, we'll use x as ynew. */
  (void) memcpy(y, x,
                (uint_T)nXc*sizeof(real_T));
 8000e2c:	693b      	ldr	r3, [r7, #16]
  (void) memcpy(y, x,
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	461a      	mov	r2, r3
 8000e32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000e34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e36:	f001 fddb 	bl	80029f0 <memcpy>

  /* Assumes that rtsiSetT and ModelOutputs are up-to-date */
  /* f0 = f(t,y) */
  rtsiSetdX(si, f0);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000e3e:	6a3a      	ldr	r2, [r7, #32]
 8000e40:	601a      	str	r2, [r3, #0]
  BrakeSimProto_derivatives();
 8000e42:	f000 fa51 	bl	80012e8 <BrakeSimProto_derivatives>

  /* f1 = f(t + (h/2), y + (h/2)*f0) */
  temp = 0.5 * h;
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	4b96      	ldr	r3, [pc, #600]	@ (80010a4 <rt_ertODEUpdateContinuousStates+0x2e0>)
 8000e4c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000e50:	f7ff fb7e 	bl	8000550 <__aeabi_dmul>
 8000e54:	4602      	mov	r2, r0
 8000e56:	460b      	mov	r3, r1
 8000e58:	e9c7 2302 	strd	r2, r3, [r7, #8]
  for (i = 0; i < nXc; i++) {
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000e60:	e024      	b.n	8000eac <rt_ertODEUpdateContinuousStates+0xe8>
    x[i] = y[i] + (temp*f0[i]);
 8000e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e68:	4413      	add	r3, r2
 8000e6a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000e6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	6a3a      	ldr	r2, [r7, #32]
 8000e74:	4413      	add	r3, r2
 8000e76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e7e:	f7ff fb67 	bl	8000550 <__aeabi_dmul>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4610      	mov	r0, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e90:	18d6      	adds	r6, r2, r3
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4620      	mov	r0, r4
 8000e98:	4629      	mov	r1, r5
 8000e9a:	f7ff f9a3 	bl	80001e4 <__adddf3>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < nXc; i++) {
 8000ea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000eac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dbd6      	blt.n	8000e62 <rt_ertODEUpdateContinuousStates+0x9e>
  }

  rtsiSetT(si, t + temp);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000eb8:	681c      	ldr	r4, [r3, #0]
 8000eba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ebe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8000ec2:	f7ff f98f 	bl	80001e4 <__adddf3>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	e9c4 2300 	strd	r2, r3, [r4]
  rtsiSetdX(si, f1);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000ed2:	69fa      	ldr	r2, [r7, #28]
 8000ed4:	601a      	str	r2, [r3, #0]
  BrakeSimProto_step();
 8000ed6:	f000 f8eb 	bl	80010b0 <BrakeSimProto_step>
  BrakeSimProto_derivatives();
 8000eda:	f000 fa05 	bl	80012e8 <BrakeSimProto_derivatives>

  /* f2 = f(t + (h/2), y + (h/2)*f1) */
  for (i = 0; i < nXc; i++) {
 8000ede:	2300      	movs	r3, #0
 8000ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000ee2:	e024      	b.n	8000f2e <rt_ertODEUpdateContinuousStates+0x16a>
    x[i] = y[i] + (temp*f1[i]);
 8000ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eea:	4413      	add	r3, r2
 8000eec:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	69fa      	ldr	r2, [r7, #28]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f00:	f7ff fb26 	bl	8000550 <__aeabi_dmul>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f12:	18d6      	adds	r6, r2, r3
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	4620      	mov	r0, r4
 8000f1a:	4629      	mov	r1, r5
 8000f1c:	f7ff f962 	bl	80001e4 <__adddf3>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < nXc; i++) {
 8000f28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000f2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	dbd6      	blt.n	8000ee4 <rt_ertODEUpdateContinuousStates+0x120>
  }

  rtsiSetdX(si, f2);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	601a      	str	r2, [r3, #0]
  BrakeSimProto_step();
 8000f3e:	f000 f8b7 	bl	80010b0 <BrakeSimProto_step>
  BrakeSimProto_derivatives();
 8000f42:	f000 f9d1 	bl	80012e8 <BrakeSimProto_derivatives>

  /* f3 = f(t + h, y + h*f2) */
  for (i = 0; i < nXc; i++) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000f4a:	e024      	b.n	8000f96 <rt_ertODEUpdateContinuousStates+0x1d2>
    x[i] = y[i] + (h*f2[i]);
 8000f4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f52:	4413      	add	r3, r2
 8000f54:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000f58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4413      	add	r3, r2
 8000f60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f64:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000f68:	f7ff faf2 	bl	8000550 <__aeabi_dmul>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f7a:	18d6      	adds	r6, r2, r3
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4620      	mov	r0, r4
 8000f82:	4629      	mov	r1, r5
 8000f84:	f7ff f92e 	bl	80001e4 <__adddf3>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < nXc; i++) {
 8000f90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f92:	3301      	adds	r3, #1
 8000f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000f96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	dbd6      	blt.n	8000f4c <rt_ertODEUpdateContinuousStates+0x188>
  }

  rtsiSetT(si, tnew);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000fa2:	6819      	ldr	r1, [r3, #0]
 8000fa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000fa8:	e9c1 2300 	strd	r2, r3, [r1]
  rtsiSetdX(si, f3);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	601a      	str	r2, [r3, #0]
  BrakeSimProto_step();
 8000fb4:	f000 f87c 	bl	80010b0 <BrakeSimProto_step>
  BrakeSimProto_derivatives();
 8000fb8:	f000 f996 	bl	80012e8 <BrakeSimProto_derivatives>

  /* tnew = t + h
     ynew = y + (h/6)*(f0 + 2*f1 + 2*f2 + 2*f3) */
  temp = h / 6.0;
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	4b39      	ldr	r3, [pc, #228]	@ (80010a8 <rt_ertODEUpdateContinuousStates+0x2e4>)
 8000fc2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000fc6:	f7ff fbed 	bl	80007a4 <__aeabi_ddiv>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	e9c7 2302 	strd	r2, r3, [r7, #8]
  for (i = 0; i < nXc; i++) {
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000fd6:	e058      	b.n	800108a <rt_ertODEUpdateContinuousStates+0x2c6>
    x[i] = y[i] + temp*(f0[i] + 2.0*f1[i] + 2.0*f2[i] + f3[i]);
 8000fd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fde:	4413      	add	r3, r2
 8000fe0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000fe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	6a3a      	ldr	r2, [r7, #32]
 8000fea:	4413      	add	r3, r2
 8000fec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8000ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	69fa      	ldr	r2, [r7, #28]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	f7ff f8f0 	bl	80001e4 <__adddf3>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4640      	mov	r0, r8
 800100a:	4649      	mov	r1, r9
 800100c:	f7ff f8ea 	bl	80001e4 <__adddf3>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4690      	mov	r8, r2
 8001016:	4699      	mov	r9, r3
 8001018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4413      	add	r3, r2
 8001020:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	f7ff f8dc 	bl	80001e4 <__adddf3>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4640      	mov	r0, r8
 8001032:	4649      	mov	r1, r9
 8001034:	f7ff f8d6 	bl	80001e4 <__adddf3>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	4413      	add	r3, r2
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff f8ca 	bl	80001e4 <__adddf3>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800105c:	f7ff fa78 	bl	8000550 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800106e:	18d6      	adds	r6, r2, r3
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4620      	mov	r0, r4
 8001076:	4629      	mov	r1, r5
 8001078:	f7ff f8b4 	bl	80001e4 <__adddf3>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < nXc; i++) {
 8001084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001086:	3301      	adds	r3, #1
 8001088:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800108a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	429a      	cmp	r2, r3
 8001090:	dba2      	blt.n	8000fd8 <rt_ertODEUpdateContinuousStates+0x214>
  }

  rtsiSetSimTimeStep(si,MAJOR_TIME_STEP);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
}
 800109a:	bf00      	nop
 800109c:	3754      	adds	r7, #84	@ 0x54
 800109e:	46bd      	mov	sp, r7
 80010a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010a4:	3fe00000 	.word	0x3fe00000
 80010a8:	40180000 	.word	0x40180000
 80010ac:	00000000 	.word	0x00000000

080010b0 <BrakeSimProto_step>:

/* Model step function */
void BrakeSimProto_step(void)
{
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  real_T rtb_DataTypeConversion2;
  if (rtmIsMajorTimeStep(rtM)) {
 80010b6:	4b84      	ldr	r3, [pc, #528]	@ (80012c8 <BrakeSimProto_step+0x218>)
 80010b8:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d110      	bne.n	80010e2 <BrakeSimProto_step+0x32>
    /* set solver stop time */
    rtsiSetSolverStopTime(&rtM->solverInfo,((rtM->Timing.clockTick0+1)*
 80010c0:	4b81      	ldr	r3, [pc, #516]	@ (80012c8 <BrakeSimProto_step+0x218>)
 80010c2:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 80010c6:	3301      	adds	r3, #1
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff f9c7 	bl	800045c <__aeabi_ui2d>
 80010ce:	4b7e      	ldr	r3, [pc, #504]	@ (80012c8 <BrakeSimProto_step+0x218>)
 80010d0:	e9d3 2370 	ldrd	r2, r3, [r3, #448]	@ 0x1c0
 80010d4:	4c7c      	ldr	r4, [pc, #496]	@ (80012c8 <BrakeSimProto_step+0x218>)
 80010d6:	f7ff fa3b 	bl	8000550 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	e9c4 2308 	strd	r2, r3, [r4, #32]
      rtM->Timing.stepSize0));
  }                                    /* end MajorTimeStep */

  /* Update absolute time of base rate at minor time step */
  if (rtmIsMinorTimeStep(rtM)) {
 80010e2:	4b79      	ldr	r3, [pc, #484]	@ (80012c8 <BrakeSimProto_step+0x218>)
 80010e4:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10a      	bne.n	8001102 <BrakeSimProto_step+0x52>
    rtM->Timing.t[0] = rtsiGetT(&rtM->solverInfo);
 80010ec:	4b76      	ldr	r3, [pc, #472]	@ (80012c8 <BrakeSimProto_step+0x218>)
 80010ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a74      	ldr	r2, [pc, #464]	@ (80012c8 <BrakeSimProto_step+0x218>)
 80010f6:	f8d2 11d0 	ldr.w	r1, [r2, #464]	@ 0x1d0
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	e9c1 2300 	strd	r2, r3, [r1]

  /* Fcn: '<Root>/Relative Slip Estimation' incorporates:
   *  Inport: '<Root>/&#x3C9;_v'
   *  Inport: '<Root>/&#x3C9;_w'
   */
  rtDW.slp = 1.0 - rtU._w / ((real_T)(rtU._v == 0.0) * 2.2204460492503131e-16 +
 8001102:	4b72      	ldr	r3, [pc, #456]	@ (80012cc <BrakeSimProto_step+0x21c>)
 8001104:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001108:	4b70      	ldr	r3, [pc, #448]	@ (80012cc <BrakeSimProto_step+0x21c>)
 800110a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	f7ff fc83 	bl	8000a20 <__aeabi_dcmpeq>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <BrakeSimProto_step+0x78>
 8001120:	f04f 0000 	mov.w	r0, #0
 8001124:	496a      	ldr	r1, [pc, #424]	@ (80012d0 <BrakeSimProto_step+0x220>)
 8001126:	e003      	b.n	8001130 <BrakeSimProto_step+0x80>
 8001128:	f04f 0000 	mov.w	r0, #0
 800112c:	f04f 0100 	mov.w	r1, #0
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	4b67      	ldr	r3, [pc, #412]	@ (80012d4 <BrakeSimProto_step+0x224>)
 8001136:	f7ff fa0b 	bl	8000550 <__aeabi_dmul>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
    rtU._v);
 8001142:	4b62      	ldr	r3, [pc, #392]	@ (80012cc <BrakeSimProto_step+0x21c>)
 8001144:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  rtDW.slp = 1.0 - rtU._w / ((real_T)(rtU._v == 0.0) * 2.2204460492503131e-16 +
 8001148:	f7ff f84c 	bl	80001e4 <__adddf3>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4620      	mov	r0, r4
 8001152:	4629      	mov	r1, r5
 8001154:	f7ff fb26 	bl	80007a4 <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	f04f 0000 	mov.w	r0, #0
 8001160:	495b      	ldr	r1, [pc, #364]	@ (80012d0 <BrakeSimProto_step+0x220>)
 8001162:	f7ff f83d 	bl	80001e0 <__aeabi_dsub>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	495b      	ldr	r1, [pc, #364]	@ (80012d8 <BrakeSimProto_step+0x228>)
 800116c:	e9c1 2300 	strd	r2, r3, [r1]

  /* Sum: '<Root>/Sum' incorporates:
   *  Inport: '<Root>/Desired Relative Slip'
   */
  rtb_DataTypeConversion2 = rtU.DesiredRelativeSlip - rtDW.slp;
 8001170:	4b56      	ldr	r3, [pc, #344]	@ (80012cc <BrakeSimProto_step+0x21c>)
 8001172:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001176:	4b58      	ldr	r3, [pc, #352]	@ (80012d8 <BrakeSimProto_step+0x228>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff f830 	bl	80001e0 <__aeabi_dsub>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	e9c7 2300 	strd	r2, r3, [r7]
  /* Sum: '<S2>/Sum' incorporates:
   *  Constant: '<S2>/Constant'
   *  RelationalOperator: '<S2>/Relational Operator'
   *  RelationalOperator: '<S2>/Relational Operator1'
   */
  rtDW.Sum = (rtb_DataTypeConversion2 > 0.0) - (rtb_DataTypeConversion2 < 0.0);
 8001188:	2301      	movs	r3, #1
 800118a:	461c      	mov	r4, r3
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001198:	f7ff fc6a 	bl	8000a70 <__aeabi_dcmpgt>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <BrakeSimProto_step+0xf6>
 80011a2:	2300      	movs	r3, #0
 80011a4:	461c      	mov	r4, r3
 80011a6:	b2e3      	uxtb	r3, r4
 80011a8:	461c      	mov	r4, r3
 80011aa:	2301      	movs	r3, #1
 80011ac:	461d      	mov	r5, r3
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011ba:	f7ff fc3b 	bl	8000a34 <__aeabi_dcmplt>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <BrakeSimProto_step+0x118>
 80011c4:	2300      	movs	r3, #0
 80011c6:	461d      	mov	r5, r3
 80011c8:	b2eb      	uxtb	r3, r5
 80011ca:	1ae3      	subs	r3, r4, r3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f955 	bl	800047c <__aeabi_i2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4940      	ldr	r1, [pc, #256]	@ (80012d8 <BrakeSimProto_step+0x228>)
 80011d8:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Outport: '<Root>/Motor Input' */
  rtY.MotorInput = rtDW.Sum;
 80011dc:	4b3e      	ldr	r3, [pc, #248]	@ (80012d8 <BrakeSimProto_step+0x228>)
 80011de:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011e2:	493e      	ldr	r1, [pc, #248]	@ (80012dc <BrakeSimProto_step+0x22c>)
 80011e4:	e9c1 2300 	strd	r2, r3, [r1]

  /* Integrator: '<S1>/Brake pressure' */
  /* Limited  Integrator  */
  if (rtX.Brakepressure_CSTATE >= 1500.0) {
 80011e8:	4b3d      	ldr	r3, [pc, #244]	@ (80012e0 <BrakeSimProto_step+0x230>)
 80011ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011ee:	a330      	add	r3, pc, #192	@ (adr r3, 80012b0 <BrakeSimProto_step+0x200>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7ff fc32 	bl	8000a5c <__aeabi_dcmpge>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <BrakeSimProto_step+0x15c>
    rtX.Brakepressure_CSTATE = 1500.0;
 80011fe:	4938      	ldr	r1, [pc, #224]	@ (80012e0 <BrakeSimProto_step+0x230>)
 8001200:	a32b      	add	r3, pc, #172	@ (adr r3, 80012b0 <BrakeSimProto_step+0x200>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800120a:	e012      	b.n	8001232 <BrakeSimProto_step+0x182>
  } else if (rtX.Brakepressure_CSTATE <= 0.0) {
 800120c:	4b34      	ldr	r3, [pc, #208]	@ (80012e0 <BrakeSimProto_step+0x230>)
 800120e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	f04f 0300 	mov.w	r3, #0
 800121a:	f7ff fc15 	bl	8000a48 <__aeabi_dcmple>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d006      	beq.n	8001232 <BrakeSimProto_step+0x182>
    rtX.Brakepressure_CSTATE = 0.0;
 8001224:	492e      	ldr	r1, [pc, #184]	@ (80012e0 <BrakeSimProto_step+0x230>)
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  }

  /* End of Integrator: '<S1>/Brake pressure' */

  /* TransferFcn: '<S1>/Motor Actuation Lag' */
  rtDW.MotorActuationLag = 10000.0 * rtX.MotorActuationLag_CSTATE;
 8001232:	4b2b      	ldr	r3, [pc, #172]	@ (80012e0 <BrakeSimProto_step+0x230>)
 8001234:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001238:	a31f      	add	r3, pc, #124	@ (adr r3, 80012b8 <BrakeSimProto_step+0x208>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff f987 	bl	8000550 <__aeabi_dmul>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4924      	ldr	r1, [pc, #144]	@ (80012d8 <BrakeSimProto_step+0x228>)
 8001248:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Gain: '<Root>/Wheel Radius' incorporates:
   *  Inport: '<Root>/&#x3C9;_v'
   */
  rtDW.WheelRadius = 0.9 * rtU._v;
 800124c:	4b1f      	ldr	r3, [pc, #124]	@ (80012cc <BrakeSimProto_step+0x21c>)
 800124e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001252:	a31b      	add	r3, pc, #108	@ (adr r3, 80012c0 <BrakeSimProto_step+0x210>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f97a 	bl	8000550 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	491d      	ldr	r1, [pc, #116]	@ (80012d8 <BrakeSimProto_step+0x228>)
 8001262:	e9c1 2306 	strd	r2, r3, [r1, #24]
  if (rtmIsMajorTimeStep(rtM)) {
 8001266:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <BrakeSimProto_step+0x218>)
 8001268:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 800126c:	2b01      	cmp	r3, #1
 800126e:	d118      	bne.n	80012a2 <BrakeSimProto_step+0x1f2>
    rt_ertODEUpdateContinuousStates(&rtM->solverInfo);
 8001270:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <BrakeSimProto_step+0x218>)
 8001272:	3308      	adds	r3, #8
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fda5 	bl	8000dc4 <rt_ertODEUpdateContinuousStates>
    /* The "clockTick0" counts the number of times the code of this task has
     * been executed. The absolute time is the multiplication of "clockTick0"
     * and "Timing.stepSize0". Size of "clockTick0" ensures timer will not
     * overflow during the application lifespan selected.
     */
    ++rtM->Timing.clockTick0;
 800127a:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <BrakeSimProto_step+0x218>)
 800127c:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 8001280:	3201      	adds	r2, #1
 8001282:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
    rtM->Timing.t[0] = rtsiGetSolverStopTime(&rtM->solverInfo);
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <BrakeSimProto_step+0x218>)
 8001288:	4a0f      	ldr	r2, [pc, #60]	@ (80012c8 <BrakeSimProto_step+0x218>)
 800128a:	f8d2 11d0 	ldr.w	r1, [r2, #464]	@ 0x1d0
 800128e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001292:	e9c1 2300 	strd	r2, r3, [r1]
      /* The "clockTick1" counts the number of times the code of this task has
       * been executed. The resolution of this integer timer is 0.001, which is the step size
       * of the task. Size of "clockTick1" ensures timer will not overflow during the
       * application lifespan selected.
       */
      rtM->Timing.clockTick1++;
 8001296:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <BrakeSimProto_step+0x218>)
 8001298:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
 800129c:	3201      	adds	r2, #1
 800129e:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
    }
  }                                    /* end MajorTimeStep */
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bdb0      	pop	{r4, r5, r7, pc}
 80012aa:	bf00      	nop
 80012ac:	f3af 8000 	nop.w
 80012b0:	00000000 	.word	0x00000000
 80012b4:	40977000 	.word	0x40977000
 80012b8:	00000000 	.word	0x00000000
 80012bc:	40c38800 	.word	0x40c38800
 80012c0:	cccccccd 	.word	0xcccccccd
 80012c4:	3feccccc 	.word	0x3feccccc
 80012c8:	20000090 	.word	0x20000090
 80012cc:	20000070 	.word	0x20000070
 80012d0:	3ff00000 	.word	0x3ff00000
 80012d4:	3cb00000 	.word	0x3cb00000
 80012d8:	20000050 	.word	0x20000050
 80012dc:	20000088 	.word	0x20000088
 80012e0:	20000038 	.word	0x20000038
 80012e4:	00000000 	.word	0x00000000

080012e8 <BrakeSimProto_derivatives>:

/* Derivatives for root system: '<Root>' */
void BrakeSimProto_derivatives(void)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
  XDot *_rtXdot;
  boolean_T lsat;
  boolean_T usat;
  _rtXdot = ((XDot *) rtM->derivs);
 80012ee:	4b40      	ldr	r3, [pc, #256]	@ (80013f0 <BrakeSimProto_derivatives+0x108>)
 80012f0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80012f4:	607b      	str	r3, [r7, #4]

  /* Derivatives for Integrator: '<Root>/Integrator' */
  _rtXdot->Integrator_CSTATE = rtDW.WheelRadius;
 80012f6:	4b3f      	ldr	r3, [pc, #252]	@ (80013f4 <BrakeSimProto_derivatives+0x10c>)
 80012f8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	e9c1 2300 	strd	r2, r3, [r1]

  /* Derivatives for Integrator: '<S1>/Brake pressure' */
  lsat = (rtX.Brakepressure_CSTATE <= 0.0);
 8001302:	4b3d      	ldr	r3, [pc, #244]	@ (80013f8 <BrakeSimProto_derivatives+0x110>)
 8001304:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001308:	2301      	movs	r3, #1
 800130a:	461c      	mov	r4, r3
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	f7ff fb98 	bl	8000a48 <__aeabi_dcmple>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <BrakeSimProto_derivatives+0x3a>
 800131e:	2300      	movs	r3, #0
 8001320:	461c      	mov	r4, r3
 8001322:	b2e3      	uxtb	r3, r4
 8001324:	70fb      	strb	r3, [r7, #3]
  usat = (rtX.Brakepressure_CSTATE >= 1500.0);
 8001326:	4b34      	ldr	r3, [pc, #208]	@ (80013f8 <BrakeSimProto_derivatives+0x110>)
 8001328:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800132c:	2301      	movs	r3, #1
 800132e:	461c      	mov	r4, r3
 8001330:	a32d      	add	r3, pc, #180	@ (adr r3, 80013e8 <BrakeSimProto_derivatives+0x100>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	f7ff fb91 	bl	8000a5c <__aeabi_dcmpge>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <BrakeSimProto_derivatives+0x5c>
 8001340:	2300      	movs	r3, #0
 8001342:	461c      	mov	r4, r3
 8001344:	b2e3      	uxtb	r3, r4
 8001346:	70bb      	strb	r3, [r7, #2]
  if (((!lsat) && (!usat)) || (lsat && (rtDW.MotorActuationLag > 0.0)) || (usat &&
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <BrakeSimProto_derivatives+0x6c>
 800134e:	78bb      	ldrb	r3, [r7, #2]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d01d      	beq.n	8001390 <BrakeSimProto_derivatives+0xa8>
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <BrakeSimProto_derivatives+0x8a>
 800135a:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <BrakeSimProto_derivatives+0x10c>)
 800135c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	f7ff fb82 	bl	8000a70 <__aeabi_dcmpgt>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10e      	bne.n	8001390 <BrakeSimProto_derivatives+0xa8>
 8001372:	78bb      	ldrb	r3, [r7, #2]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d012      	beq.n	800139e <BrakeSimProto_derivatives+0xb6>
       (rtDW.MotorActuationLag < 0.0))) {
 8001378:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <BrakeSimProto_derivatives+0x10c>)
 800137a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
  if (((!lsat) && (!usat)) || (lsat && (rtDW.MotorActuationLag > 0.0)) || (usat &&
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	f7ff fb55 	bl	8000a34 <__aeabi_dcmplt>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d006      	beq.n	800139e <BrakeSimProto_derivatives+0xb6>
    _rtXdot->Brakepressure_CSTATE = rtDW.MotorActuationLag;
 8001390:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <BrakeSimProto_derivatives+0x10c>)
 8001392:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800139c:	e006      	b.n	80013ac <BrakeSimProto_derivatives+0xc4>
  } else {
    /* in saturation */
    _rtXdot->Brakepressure_CSTATE = 0.0;
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
  }

  /* End of Derivatives for Integrator: '<S1>/Brake pressure' */

  /* Derivatives for TransferFcn: '<S1>/Motor Actuation Lag' */
  _rtXdot->MotorActuationLag_CSTATE = -100.0 * rtX.MotorActuationLag_CSTATE;
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <BrakeSimProto_derivatives+0x110>)
 80013ae:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <BrakeSimProto_derivatives+0x114>)
 80013b8:	f7ff f8ca 	bl	8000550 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	e9c1 2304 	strd	r2, r3, [r1, #16]
  _rtXdot->MotorActuationLag_CSTATE += rtDW.Sum;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80013cc:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <BrakeSimProto_derivatives+0x10c>)
 80013ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013d2:	f7fe ff07 	bl	80001e4 <__adddf3>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd90      	pop	{r4, r7, pc}
 80013e8:	00000000 	.word	0x00000000
 80013ec:	40977000 	.word	0x40977000
 80013f0:	20000090 	.word	0x20000090
 80013f4:	20000050 	.word	0x20000050
 80013f8:	20000038 	.word	0x20000038
 80013fc:	c0590000 	.word	0xc0590000

08001400 <BrakeSimProto_initialize>:

/* Model initialize function */
void BrakeSimProto_initialize(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* Registration code */
  {
    /* Setup solver object */
    rtsiSetSimTimeStepPtr(&rtM->solverInfo, &rtM->Timing.simTimeStep);
 8001404:	4b4c      	ldr	r3, [pc, #304]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001406:	4a4c      	ldr	r2, [pc, #304]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001408:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800140c:	60d3      	str	r3, [r2, #12]
    rtsiSetTPtr(&rtM->solverInfo, &rtmGetTPtr(rtM));
 800140e:	4b4a      	ldr	r3, [pc, #296]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001410:	4a49      	ldr	r2, [pc, #292]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001412:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8001416:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    rtsiSetStepSizePtr(&rtM->solverInfo, &rtM->Timing.stepSize0);
 800141a:	4b47      	ldr	r3, [pc, #284]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 800141c:	4a46      	ldr	r2, [pc, #280]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 800141e:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8001422:	6293      	str	r3, [r2, #40]	@ 0x28
    rtsiSetdXPtr(&rtM->solverInfo, &rtM->derivs);
 8001424:	4b44      	ldr	r3, [pc, #272]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001426:	4a44      	ldr	r2, [pc, #272]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001428:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800142c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    rtsiSetContStatesPtr(&rtM->solverInfo, (real_T **) &rtM->contStates);
 8001430:	4b41      	ldr	r3, [pc, #260]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001432:	4a41      	ldr	r2, [pc, #260]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001434:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8001438:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    rtsiSetNumContStatesPtr(&rtM->solverInfo, &rtM->Sizes.numContStates);
 800143c:	4b3e      	ldr	r3, [pc, #248]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 800143e:	4a3e      	ldr	r2, [pc, #248]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001440:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    rtsiSetNumPeriodicContStatesPtr(&rtM->solverInfo,
 8001448:	4b3b      	ldr	r3, [pc, #236]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 800144a:	4a3b      	ldr	r2, [pc, #236]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 800144c:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8001450:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      &rtM->Sizes.numPeriodicContStates);
    rtsiSetPeriodicContStateIndicesPtr(&rtM->solverInfo,
 8001454:	4b38      	ldr	r3, [pc, #224]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001456:	4a38      	ldr	r2, [pc, #224]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001458:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800145c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      &rtM->periodicContStateIndices);
    rtsiSetPeriodicContStateRangesPtr(&rtM->solverInfo,
 8001460:	4b35      	ldr	r3, [pc, #212]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001462:	4a35      	ldr	r2, [pc, #212]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001464:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8001468:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      &rtM->periodicContStateRanges);
    rtsiSetErrorStatusPtr(&rtM->solverInfo, (&rtmGetErrorStatus(rtM)));
 800146c:	4a32      	ldr	r2, [pc, #200]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 800146e:	4b32      	ldr	r3, [pc, #200]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001470:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    rtsiSetRTModelPtr(&rtM->solverInfo, rtM);
 8001474:	4b30      	ldr	r3, [pc, #192]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001476:	4a30      	ldr	r2, [pc, #192]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001478:	609a      	str	r2, [r3, #8]
  }

  rtsiSetSimTimeStep(&rtM->solverInfo, MAJOR_TIME_STEP);
 800147a:	4b2f      	ldr	r3, [pc, #188]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
  rtM->intgData.y = rtM->odeY;
 8001482:	4b2d      	ldr	r3, [pc, #180]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001484:	4a2c      	ldr	r2, [pc, #176]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001486:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800148a:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
  rtM->intgData.f[0] = rtM->odeF[0];
 800148e:	4b2a      	ldr	r3, [pc, #168]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001490:	4a29      	ldr	r2, [pc, #164]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 8001492:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001496:	f8c2 319c 	str.w	r3, [r2, #412]	@ 0x19c
  rtM->intgData.f[1] = rtM->odeF[1];
 800149a:	4b27      	ldr	r3, [pc, #156]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 800149c:	4a26      	ldr	r2, [pc, #152]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 800149e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80014a2:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
  rtM->intgData.f[2] = rtM->odeF[2];
 80014a6:	4b24      	ldr	r3, [pc, #144]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 80014a8:	4a23      	ldr	r2, [pc, #140]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 80014aa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80014ae:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
  rtM->intgData.f[3] = rtM->odeF[3];
 80014b2:	4b21      	ldr	r3, [pc, #132]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 80014b4:	4a20      	ldr	r2, [pc, #128]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 80014b6:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80014ba:	f8c2 31a8 	str.w	r3, [r2, #424]	@ 0x1a8
  rtM->contStates = ((X *) &rtX);
 80014be:	4b1e      	ldr	r3, [pc, #120]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 80014c0:	4a1e      	ldr	r2, [pc, #120]	@ (800153c <BrakeSimProto_initialize+0x13c>)
 80014c2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  rtsiSetSolverData(&rtM->solverInfo, (void *)&rtM->intgData);
 80014c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 80014c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 80014ca:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80014ce:	6113      	str	r3, [r2, #16]
  rtsiSetIsMinorTimeStepWithModeChange(&rtM->solverInfo, false);
 80014d0:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
  rtsiSetSolverName(&rtM->solverInfo,"ode4");
 80014d8:	4b17      	ldr	r3, [pc, #92]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 80014da:	4a19      	ldr	r2, [pc, #100]	@ (8001540 <BrakeSimProto_initialize+0x140>)
 80014dc:	615a      	str	r2, [r3, #20]
  rtmSetTPtr(rtM, &rtM->Timing.tArray[0]);
 80014de:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 80014e0:	4a15      	ldr	r2, [pc, #84]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 80014e2:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80014e6:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
  rtM->Timing.stepSize0 = 0.001;
 80014ea:	4913      	ldr	r1, [pc, #76]	@ (8001538 <BrakeSimProto_initialize+0x138>)
 80014ec:	a310      	add	r3, pc, #64	@ (adr r3, 8001530 <BrakeSimProto_initialize+0x130>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	e9c1 2370 	strd	r2, r3, [r1, #448]	@ 0x1c0

  /* InitializeConditions for Integrator: '<Root>/Integrator' */
  rtX.Integrator_CSTATE = 0.0;
 80014f6:	4911      	ldr	r1, [pc, #68]	@ (800153c <BrakeSimProto_initialize+0x13c>)
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	e9c1 2300 	strd	r2, r3, [r1]

  /* InitializeConditions for Integrator: '<S1>/Brake pressure' */
  rtX.Brakepressure_CSTATE = 0.0;
 8001504:	490d      	ldr	r1, [pc, #52]	@ (800153c <BrakeSimProto_initialize+0x13c>)
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* InitializeConditions for TransferFcn: '<S1>/Motor Actuation Lag' */
  rtX.MotorActuationLag_CSTATE = 0.0;
 8001512:	490a      	ldr	r1, [pc, #40]	@ (800153c <BrakeSimProto_initialize+0x13c>)
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	f3af 8000 	nop.w
 8001530:	d2f1a9fc 	.word	0xd2f1a9fc
 8001534:	3f50624d 	.word	0x3f50624d
 8001538:	20000090 	.word	0x20000090
 800153c:	20000038 	.word	0x20000038
 8001540:	08002a24 	.word	0x08002a24

08001544 <HAL_GPIO_EXTI_Callback>:
	*t = temp_t;
}



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	if (GPIO_Pin == GPIO_PIN_13){
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001554:	d10b      	bne.n	800156e <HAL_GPIO_EXTI_Callback+0x2a>
		mode = mode + 1;
 8001556:	4b33      	ldr	r3, [pc, #204]	@ (8001624 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001560:	701a      	strb	r2, [r3, #0]
		count++ ;
 8001562:	4b31      	ldr	r3, [pc, #196]	@ (8001628 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	3301      	adds	r3, #1
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b2f      	ldr	r3, [pc, #188]	@ (8001628 <HAL_GPIO_EXTI_Callback+0xe4>)
 800156c:	701a      	strb	r2, [r3, #0]
	}
	if (mode > 3)
 800156e:	4b2d      	ldr	r3, [pc, #180]	@ (8001624 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b03      	cmp	r3, #3
 8001574:	d902      	bls.n	800157c <HAL_GPIO_EXTI_Callback+0x38>
		mode = 0;
 8001576:	4b2b      	ldr	r3, [pc, #172]	@ (8001624 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]


	if (GPIO_Pin == GPIO_PIN_4){
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	2b10      	cmp	r3, #16
 8001580:	d124      	bne.n	80015cc <HAL_GPIO_EXTI_Callback+0x88>
//		delta(&delta_t1,&t1);
//		wheel_speed = IIR(rad/delta_t1,wheel_speed);
//		wheel_speed = 30/delta_t1;

		float tmp = HAL_GetTick();
 8001582:	f000 faf9 	bl	8001b78 <HAL_GetTick>
 8001586:	ee07 0a90 	vmov	s15, r0
 800158a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800158e:	edc7 7a03 	vstr	s15, [r7, #12]
		delta_t1 = tmp - t1;
 8001592:	4b26      	ldr	r3, [pc, #152]	@ (800162c <HAL_GPIO_EXTI_Callback+0xe8>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ed97 7a03 	vldr	s14, [r7, #12]
 800159c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a0:	4b23      	ldr	r3, [pc, #140]	@ (8001630 <HAL_GPIO_EXTI_Callback+0xec>)
 80015a2:	edc3 7a00 	vstr	s15, [r3]
		t1 = tmp;
 80015a6:	4a21      	ldr	r2, [pc, #132]	@ (800162c <HAL_GPIO_EXTI_Callback+0xe8>)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6013      	str	r3, [r2, #0]
		wheel_speed = 30/delta_t1;
 80015ac:	4b20      	ldr	r3, [pc, #128]	@ (8001630 <HAL_GPIO_EXTI_Callback+0xec>)
 80015ae:	ed93 7a00 	vldr	s14, [r3]
 80015b2:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 80015b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <HAL_GPIO_EXTI_Callback+0xf0>)
 80015bc:	edc3 7a00 	vstr	s15, [r3]
		count2++;
 80015c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <HAL_GPIO_EXTI_Callback+0xf4>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	3301      	adds	r3, #1
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <HAL_GPIO_EXTI_Callback+0xf4>)
 80015ca:	701a      	strb	r2, [r3, #0]
	}


	if (GPIO_Pin == GPIO_PIN_3){
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d124      	bne.n	800161c <HAL_GPIO_EXTI_Callback+0xd8>
//		delta(&delta_t2,&t2);
//		vehicle_speed = IIR(rad/delta_t2,vehicle_speed);
//		vehicle_speed = 30/delta_t2;
		float tmp1 = HAL_GetTick();
 80015d2:	f000 fad1 	bl	8001b78 <HAL_GetTick>
 80015d6:	ee07 0a90 	vmov	s15, r0
 80015da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015de:	edc7 7a02 	vstr	s15, [r7, #8]
		delta_t2 = tmp1 - t2;
 80015e2:	4b16      	ldr	r3, [pc, #88]	@ (800163c <HAL_GPIO_EXTI_Callback+0xf8>)
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80015ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f0:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <HAL_GPIO_EXTI_Callback+0xfc>)
 80015f2:	edc3 7a00 	vstr	s15, [r3]
		t2 = tmp1;
 80015f6:	4a11      	ldr	r2, [pc, #68]	@ (800163c <HAL_GPIO_EXTI_Callback+0xf8>)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	6013      	str	r3, [r2, #0]
		vehicle_speed = 30/delta_t2;
 80015fc:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <HAL_GPIO_EXTI_Callback+0xfc>)
 80015fe:	ed93 7a00 	vldr	s14, [r3]
 8001602:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8001606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <HAL_GPIO_EXTI_Callback+0x100>)
 800160c:	edc3 7a00 	vstr	s15, [r3]
		count3++ ;
 8001610:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <HAL_GPIO_EXTI_Callback+0x104>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	3301      	adds	r3, #1
 8001616:	b2da      	uxtb	r2, r3
 8001618:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <HAL_GPIO_EXTI_Callback+0x104>)
 800161a:	701a      	strb	r2, [r3, #0]
	}
//	HAL_Delay(10);
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
}
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000290 	.word	0x20000290
 8001628:	20000291 	.word	0x20000291
 800162c:	20000280 	.word	0x20000280
 8001630:	20000000 	.word	0x20000000
 8001634:	20000278 	.word	0x20000278
 8001638:	20000292 	.word	0x20000292
 800163c:	20000284 	.word	0x20000284
 8001640:	20000004 	.word	0x20000004
 8001644:	2000027c 	.word	0x2000027c
 8001648:	20000293 	.word	0x20000293
 800164c:	00000000 	.word	0x00000000

08001650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001654:	f000 fa2a 	bl	8001aac <HAL_Init>

  /* USER CODE BEGIN Init */
  BrakeSimProto_initialize();
 8001658:	f7ff fed2 	bl	8001400 <BrakeSimProto_initialize>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165c:	f000 f868 	bl	8001730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001660:	f000 f8d0 	bl	8001804 <MX_GPIO_Init>





	  rtU._v = vehicle_speed;
 8001664:	4b2a      	ldr	r3, [pc, #168]	@ (8001710 <main+0xc0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe ff19 	bl	80004a0 <__aeabi_f2d>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4928      	ldr	r1, [pc, #160]	@ (8001714 <main+0xc4>)
 8001674:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  rtU._w = wheel_speed;
 8001678:	4b27      	ldr	r3, [pc, #156]	@ (8001718 <main+0xc8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff0f 	bl	80004a0 <__aeabi_f2d>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4923      	ldr	r1, [pc, #140]	@ (8001714 <main+0xc4>)
 8001688:	e9c1 2300 	strd	r2, r3, [r1]
	  rtU.DesiredRelativeSlip = 0.2;
 800168c:	4921      	ldr	r1, [pc, #132]	@ (8001714 <main+0xc4>)
 800168e:	a31e      	add	r3, pc, #120	@ (adr r3, 8001708 <main+0xb8>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  BrakeSimProto_step();
 8001698:	f7ff fd0a 	bl	80010b0 <BrakeSimProto_step>
//	  HAL_Delay(1000);
	  controller_out = rtY.MotorInput;
 800169c:	4b1f      	ldr	r3, [pc, #124]	@ (800171c <main+0xcc>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff f9ed 	bl	8000a84 <__aeabi_d2iz>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001720 <main+0xd0>)
 80016ae:	6013      	str	r3, [r2, #0]

	  //Forcing the brakes on if no detection within 2.5 seconds (they should be hard on)
	  counter_check = HAL_GetTick();
 80016b0:	f000 fa62 	bl	8001b78 <HAL_GetTick>
 80016b4:	ee07 0a90 	vmov	s15, r0
 80016b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016bc:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <main+0xd4>)
 80016be:	edc3 7a00 	vstr	s15, [r3]
	  //Still need to measure the magnets to get a good rad measurement

//	  rtU._w = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
//	  rtU._v = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);

	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_SET){
 80016c2:	2108      	movs	r1, #8
 80016c4:	4818      	ldr	r0, [pc, #96]	@ (8001728 <main+0xd8>)
 80016c6:	f000 fcf9 	bl	80020bc <HAL_GPIO_ReadPin>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d105      	bne.n	80016dc <main+0x8c>
	  	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80016d0:	2201      	movs	r2, #1
 80016d2:	2120      	movs	r1, #32
 80016d4:	4815      	ldr	r0, [pc, #84]	@ (800172c <main+0xdc>)
 80016d6:	f000 fd09 	bl	80020ec <HAL_GPIO_WritePin>
 80016da:	e004      	b.n	80016e6 <main+0x96>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	2120      	movs	r1, #32
 80016e0:	4812      	ldr	r0, [pc, #72]	@ (800172c <main+0xdc>)
 80016e2:	f000 fd03 	bl	80020ec <HAL_GPIO_WritePin>
//	  	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
//	  	  		  HAL_Delay(200);
//	  	  	  }


	  if (controller_out == 1){
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <main+0xd0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d105      	bne.n	80016fa <main+0xaa>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2120      	movs	r1, #32
 80016f2:	480e      	ldr	r0, [pc, #56]	@ (800172c <main+0xdc>)
 80016f4:	f000 fcfa 	bl	80020ec <HAL_GPIO_WritePin>
 80016f8:	e7b4      	b.n	8001664 <main+0x14>
	  }
	  else{
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2120      	movs	r1, #32
 80016fe:	480b      	ldr	r0, [pc, #44]	@ (800172c <main+0xdc>)
 8001700:	f000 fcf4 	bl	80020ec <HAL_GPIO_WritePin>
	  rtU._v = vehicle_speed;
 8001704:	e7ae      	b.n	8001664 <main+0x14>
 8001706:	bf00      	nop
 8001708:	9999999a 	.word	0x9999999a
 800170c:	3fc99999 	.word	0x3fc99999
 8001710:	2000027c 	.word	0x2000027c
 8001714:	20000070 	.word	0x20000070
 8001718:	20000278 	.word	0x20000278
 800171c:	20000088 	.word	0x20000088
 8001720:	20000288 	.word	0x20000288
 8001724:	2000028c 	.word	0x2000028c
 8001728:	40020800 	.word	0x40020800
 800172c:	40020000 	.word	0x40020000

08001730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b094      	sub	sp, #80	@ 0x50
 8001734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	2230      	movs	r2, #48	@ 0x30
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f001 f92a 	bl	8002998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	4b28      	ldr	r3, [pc, #160]	@ (80017fc <SystemClock_Config+0xcc>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175c:	4a27      	ldr	r2, [pc, #156]	@ (80017fc <SystemClock_Config+0xcc>)
 800175e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001762:	6413      	str	r3, [r2, #64]	@ 0x40
 8001764:	4b25      	ldr	r3, [pc, #148]	@ (80017fc <SystemClock_Config+0xcc>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	4b22      	ldr	r3, [pc, #136]	@ (8001800 <SystemClock_Config+0xd0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800177c:	4a20      	ldr	r2, [pc, #128]	@ (8001800 <SystemClock_Config+0xd0>)
 800177e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b1e      	ldr	r3, [pc, #120]	@ (8001800 <SystemClock_Config+0xd0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001790:	2301      	movs	r3, #1
 8001792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001794:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800179a:	2302      	movs	r3, #2
 800179c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800179e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80017a4:	2306      	movs	r3, #6
 80017a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80017a8:	2354      	movs	r3, #84	@ 0x54
 80017aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ac:	2302      	movs	r3, #2
 80017ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017b0:	2304      	movs	r3, #4
 80017b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b4:	f107 0320 	add.w	r3, r7, #32
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fcc9 	bl	8002150 <HAL_RCC_OscConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017c4:	f000 f8c2 	bl	800194c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c8:	230f      	movs	r3, #15
 80017ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017cc:	2302      	movs	r3, #2
 80017ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	2102      	movs	r1, #2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 ff2b 	bl	8002640 <HAL_RCC_ClockConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017f0:	f000 f8ac 	bl	800194c <Error_Handler>
  }
}
 80017f4:	bf00      	nop
 80017f6:	3750      	adds	r7, #80	@ 0x50
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	40007000 	.word	0x40007000

08001804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
 8001818:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	4b48      	ldr	r3, [pc, #288]	@ (8001940 <MX_GPIO_Init+0x13c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a47      	ldr	r2, [pc, #284]	@ (8001940 <MX_GPIO_Init+0x13c>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b45      	ldr	r3, [pc, #276]	@ (8001940 <MX_GPIO_Init+0x13c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	4b41      	ldr	r3, [pc, #260]	@ (8001940 <MX_GPIO_Init+0x13c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	4a40      	ldr	r2, [pc, #256]	@ (8001940 <MX_GPIO_Init+0x13c>)
 8001840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001844:	6313      	str	r3, [r2, #48]	@ 0x30
 8001846:	4b3e      	ldr	r3, [pc, #248]	@ (8001940 <MX_GPIO_Init+0x13c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	603b      	str	r3, [r7, #0]
 8001856:	4b3a      	ldr	r3, [pc, #232]	@ (8001940 <MX_GPIO_Init+0x13c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a39      	ldr	r2, [pc, #228]	@ (8001940 <MX_GPIO_Init+0x13c>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
 8001862:	4b37      	ldr	r3, [pc, #220]	@ (8001940 <MX_GPIO_Init+0x13c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	2101      	movs	r1, #1
 8001872:	4834      	ldr	r0, [pc, #208]	@ (8001944 <MX_GPIO_Init+0x140>)
 8001874:	f000 fc3a 	bl	80020ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	2120      	movs	r1, #32
 800187c:	4832      	ldr	r0, [pc, #200]	@ (8001948 <MX_GPIO_Init+0x144>)
 800187e:	f000 fc35 	bl	80020ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001882:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001888:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800188c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	4619      	mov	r1, r3
 8001898:	482a      	ldr	r0, [pc, #168]	@ (8001944 <MX_GPIO_Init+0x140>)
 800189a:	f000 fa8b 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800189e:	2301      	movs	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	4619      	mov	r1, r3
 80018b4:	4823      	ldr	r0, [pc, #140]	@ (8001944 <MX_GPIO_Init+0x140>)
 80018b6:	f000 fa7d 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80018ba:	231e      	movs	r3, #30
 80018bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	4619      	mov	r1, r3
 80018ce:	481d      	ldr	r0, [pc, #116]	@ (8001944 <MX_GPIO_Init+0x140>)
 80018d0:	f000 fa70 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018d4:	230c      	movs	r3, #12
 80018d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	4619      	mov	r1, r3
 80018e6:	4818      	ldr	r0, [pc, #96]	@ (8001948 <MX_GPIO_Init+0x144>)
 80018e8:	f000 fa64 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018ec:	2320      	movs	r3, #32
 80018ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	4619      	mov	r1, r3
 8001902:	4811      	ldr	r0, [pc, #68]	@ (8001948 <MX_GPIO_Init+0x144>)
 8001904:	f000 fa56 	bl	8001db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	2009      	movs	r0, #9
 800190e:	f000 fa1a 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001912:	2009      	movs	r0, #9
 8001914:	f000 fa33 	bl	8001d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	200a      	movs	r0, #10
 800191e:	f000 fa12 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001922:	200a      	movs	r0, #10
 8001924:	f000 fa2b 	bl	8001d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001928:	2200      	movs	r2, #0
 800192a:	2100      	movs	r1, #0
 800192c:	2028      	movs	r0, #40	@ 0x28
 800192e:	f000 fa0a 	bl	8001d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001932:	2028      	movs	r0, #40	@ 0x28
 8001934:	f000 fa23 	bl	8001d7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001938:	bf00      	nop
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	40020800 	.word	0x40020800
 8001948:	40020000 	.word	0x40020000

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001950:	b672      	cpsid	i
}
 8001952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <Error_Handler+0x8>

08001958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <HAL_MspInit+0x4c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	4a0f      	ldr	r2, [pc, #60]	@ (80019a4 <HAL_MspInit+0x4c>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800196c:	6453      	str	r3, [r2, #68]	@ 0x44
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <HAL_MspInit+0x4c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <HAL_MspInit+0x4c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	4a08      	ldr	r2, [pc, #32]	@ (80019a4 <HAL_MspInit+0x4c>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	@ 0x40
 800198a:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <HAL_MspInit+0x4c>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800

080019a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <NMI_Handler+0x4>

080019b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <HardFault_Handler+0x4>

080019b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <MemManage_Handler+0x4>

080019c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <BusFault_Handler+0x4>

080019c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <UsageFault_Handler+0x4>

080019d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019fe:	f000 f8a7 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001a0a:	2008      	movs	r0, #8
 8001a0c:	f000 fb88 	bl	8002120 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001a18:	2010      	movs	r0, #16
 8001a1a:	f000 fb81 	bl	8002120 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a26:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a2a:	f000 fb79 	bl	8002120 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <SystemInit+0x20>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a3e:	4a05      	ldr	r2, [pc, #20]	@ (8001a54 <SystemInit+0x20>)
 8001a40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a5c:	f7ff ffea 	bl	8001a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a60:	480c      	ldr	r0, [pc, #48]	@ (8001a94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a62:	490d      	ldr	r1, [pc, #52]	@ (8001a98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a64:	4a0d      	ldr	r2, [pc, #52]	@ (8001a9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a78:	4c0a      	ldr	r4, [pc, #40]	@ (8001aa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a86:	f000 ff8f 	bl	80029a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8a:	f7ff fde1 	bl	8001650 <main>
  bx  lr    
 8001a8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a90:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a98:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001a9c:	08002a4c 	.word	0x08002a4c
  ldr r2, =_sbss
 8001aa0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001aa4:	20000298 	.word	0x20000298

08001aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC_IRQHandler>
	...

08001aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8001aec <HAL_Init+0x40>)
 8001ab6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001abc:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <HAL_Init+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <HAL_Init+0x40>)
 8001ac2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac8:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <HAL_Init+0x40>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a07      	ldr	r2, [pc, #28]	@ (8001aec <HAL_Init+0x40>)
 8001ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f000 f92b 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ada:	200f      	movs	r0, #15
 8001adc:	f000 f808 	bl	8001af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae0:	f7ff ff3a 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023c00 	.word	0x40023c00

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af8:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <HAL_InitTick+0x54>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <HAL_InitTick+0x58>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f943 	bl	8001d9a <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00e      	b.n	8001b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d80a      	bhi.n	8001b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f000 f90b 	bl	8001d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4a06      	ldr	r2, [pc, #24]	@ (8001b4c <HAL_InitTick+0x5c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000008 	.word	0x20000008
 8001b48:	20000010 	.word	0x20000010
 8001b4c:	2000000c 	.word	0x2000000c

08001b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_IncTick+0x20>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_IncTick+0x24>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a04      	ldr	r2, [pc, #16]	@ (8001b74 <HAL_IncTick+0x24>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000010 	.word	0x20000010
 8001b74:	20000294 	.word	0x20000294

08001b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	@ (8001b8c <HAL_GetTick+0x14>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000294 	.word	0x20000294

08001b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bac:	4013      	ands	r3, r2
 8001bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc2:	4a04      	ldr	r2, [pc, #16]	@ (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	60d3      	str	r3, [r2, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bdc:	4b04      	ldr	r3, [pc, #16]	@ (8001bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f003 0307 	and.w	r3, r3, #7
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db0b      	blt.n	8001c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4907      	ldr	r1, [pc, #28]	@ (8001c2c <__NVIC_EnableIRQ+0x38>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	2001      	movs	r0, #1
 8001c16:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000e100 	.word	0xe000e100

08001c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	@ (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	@ (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	@ 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
         );
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	@ 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cfc:	d301      	bcc.n	8001d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00f      	b.n	8001d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d02:	4a0a      	ldr	r2, [pc, #40]	@ (8001d2c <SysTick_Config+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f7ff ff8e 	bl	8001c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d14:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <SysTick_Config+0x40>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1a:	4b04      	ldr	r3, [pc, #16]	@ (8001d2c <SysTick_Config+0x40>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff29 	bl	8001b90 <__NVIC_SetPriorityGrouping>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff3e 	bl	8001bd8 <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff8e 	bl	8001c84 <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5d 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff31 	bl	8001bf4 <__NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffa2 	bl	8001cec <SysTick_Config>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	@ 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	e159      	b.n	8002084 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	f040 8148 	bne.w	800207e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d005      	beq.n	8001e06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d130      	bne.n	8001e68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 0201 	and.w	r2, r3, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d017      	beq.n	8001ea4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d123      	bne.n	8001ef8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	08da      	lsrs	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3208      	adds	r2, #8
 8001eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	08da      	lsrs	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3208      	adds	r2, #8
 8001ef2:	69b9      	ldr	r1, [r7, #24]
 8001ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0203 	and.w	r2, r3, #3
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80a2 	beq.w	800207e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b57      	ldr	r3, [pc, #348]	@ (800209c <HAL_GPIO_Init+0x2e8>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	4a56      	ldr	r2, [pc, #344]	@ (800209c <HAL_GPIO_Init+0x2e8>)
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4a:	4b54      	ldr	r3, [pc, #336]	@ (800209c <HAL_GPIO_Init+0x2e8>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f56:	4a52      	ldr	r2, [pc, #328]	@ (80020a0 <HAL_GPIO_Init+0x2ec>)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a49      	ldr	r2, [pc, #292]	@ (80020a4 <HAL_GPIO_Init+0x2f0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d019      	beq.n	8001fb6 <HAL_GPIO_Init+0x202>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a48      	ldr	r2, [pc, #288]	@ (80020a8 <HAL_GPIO_Init+0x2f4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <HAL_GPIO_Init+0x1fe>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a47      	ldr	r2, [pc, #284]	@ (80020ac <HAL_GPIO_Init+0x2f8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00d      	beq.n	8001fae <HAL_GPIO_Init+0x1fa>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a46      	ldr	r2, [pc, #280]	@ (80020b0 <HAL_GPIO_Init+0x2fc>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d007      	beq.n	8001faa <HAL_GPIO_Init+0x1f6>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a45      	ldr	r2, [pc, #276]	@ (80020b4 <HAL_GPIO_Init+0x300>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d101      	bne.n	8001fa6 <HAL_GPIO_Init+0x1f2>
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	e008      	b.n	8001fb8 <HAL_GPIO_Init+0x204>
 8001fa6:	2307      	movs	r3, #7
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x204>
 8001faa:	2303      	movs	r3, #3
 8001fac:	e004      	b.n	8001fb8 <HAL_GPIO_Init+0x204>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e002      	b.n	8001fb8 <HAL_GPIO_Init+0x204>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_GPIO_Init+0x204>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	f002 0203 	and.w	r2, r2, #3
 8001fbe:	0092      	lsls	r2, r2, #2
 8001fc0:	4093      	lsls	r3, r2
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc8:	4935      	ldr	r1, [pc, #212]	@ (80020a0 <HAL_GPIO_Init+0x2ec>)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	3302      	adds	r3, #2
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fd6:	4b38      	ldr	r3, [pc, #224]	@ (80020b8 <HAL_GPIO_Init+0x304>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ffa:	4a2f      	ldr	r2, [pc, #188]	@ (80020b8 <HAL_GPIO_Init+0x304>)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002000:	4b2d      	ldr	r3, [pc, #180]	@ (80020b8 <HAL_GPIO_Init+0x304>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002024:	4a24      	ldr	r2, [pc, #144]	@ (80020b8 <HAL_GPIO_Init+0x304>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800202a:	4b23      	ldr	r3, [pc, #140]	@ (80020b8 <HAL_GPIO_Init+0x304>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800204e:	4a1a      	ldr	r2, [pc, #104]	@ (80020b8 <HAL_GPIO_Init+0x304>)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002054:	4b18      	ldr	r3, [pc, #96]	@ (80020b8 <HAL_GPIO_Init+0x304>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002078:	4a0f      	ldr	r2, [pc, #60]	@ (80020b8 <HAL_GPIO_Init+0x304>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3301      	adds	r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	2b0f      	cmp	r3, #15
 8002088:	f67f aea2 	bls.w	8001dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3724      	adds	r7, #36	@ 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	40013800 	.word	0x40013800
 80020a4:	40020000 	.word	0x40020000
 80020a8:	40020400 	.word	0x40020400
 80020ac:	40020800 	.word	0x40020800
 80020b0:	40020c00 	.word	0x40020c00
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40013c00 	.word	0x40013c00

080020bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691a      	ldr	r2, [r3, #16]
 80020cc:	887b      	ldrh	r3, [r7, #2]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	e001      	b.n	80020de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	807b      	strh	r3, [r7, #2]
 80020f8:	4613      	mov	r3, r2
 80020fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020fc:	787b      	ldrb	r3, [r7, #1]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002108:	e003      	b.n	8002112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800210a:	887b      	ldrh	r3, [r7, #2]
 800210c:	041a      	lsls	r2, r3, #16
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	619a      	str	r2, [r3, #24]
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800212a:	4b08      	ldr	r3, [pc, #32]	@ (800214c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	4013      	ands	r3, r2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d006      	beq.n	8002144 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002136:	4a05      	ldr	r2, [pc, #20]	@ (800214c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fa00 	bl	8001544 <HAL_GPIO_EXTI_Callback>
  }
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40013c00 	.word	0x40013c00

08002150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e267      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d075      	beq.n	800225a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800216e:	4b88      	ldr	r3, [pc, #544]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b04      	cmp	r3, #4
 8002178:	d00c      	beq.n	8002194 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800217a:	4b85      	ldr	r3, [pc, #532]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002182:	2b08      	cmp	r3, #8
 8002184:	d112      	bne.n	80021ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002186:	4b82      	ldr	r3, [pc, #520]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800218e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002192:	d10b      	bne.n	80021ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	4b7e      	ldr	r3, [pc, #504]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d05b      	beq.n	8002258 <HAL_RCC_OscConfig+0x108>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d157      	bne.n	8002258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e242      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b4:	d106      	bne.n	80021c4 <HAL_RCC_OscConfig+0x74>
 80021b6:	4b76      	ldr	r3, [pc, #472]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a75      	ldr	r2, [pc, #468]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0xb0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x98>
 80021ce:	4b70      	ldr	r3, [pc, #448]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a6f      	ldr	r2, [pc, #444]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b6d      	ldr	r3, [pc, #436]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a6c      	ldr	r2, [pc, #432]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0xb0>
 80021e8:	4b69      	ldr	r3, [pc, #420]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a68      	ldr	r2, [pc, #416]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b66      	ldr	r3, [pc, #408]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a65      	ldr	r2, [pc, #404]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fcb6 	bl	8001b78 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff fcb2 	bl	8001b78 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	@ 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e207      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b5b      	ldr	r3, [pc, #364]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0xc0>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7ff fca2 	bl	8001b78 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002238:	f7ff fc9e 	bl	8001b78 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	@ 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1f3      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	4b51      	ldr	r3, [pc, #324]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0xe8>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d063      	beq.n	800232e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002266:	4b4a      	ldr	r3, [pc, #296]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002272:	4b47      	ldr	r3, [pc, #284]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800227a:	2b08      	cmp	r3, #8
 800227c:	d11c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800227e:	4b44      	ldr	r3, [pc, #272]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d116      	bne.n	80022b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	4b41      	ldr	r3, [pc, #260]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x152>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e1c7      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4937      	ldr	r1, [pc, #220]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	e03a      	b.n	800232e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d020      	beq.n	8002302 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c0:	4b34      	ldr	r3, [pc, #208]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7ff fc57 	bl	8001b78 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ce:	f7ff fc53 	bl	8001b78 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1a8      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ec:	4b28      	ldr	r3, [pc, #160]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4925      	ldr	r1, [pc, #148]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
 8002300:	e015      	b.n	800232e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	4b24      	ldr	r3, [pc, #144]	@ (8002394 <HAL_RCC_OscConfig+0x244>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7ff fc36 	bl	8001b78 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002310:	f7ff fc32 	bl	8001b78 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e187      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	4b1b      	ldr	r3, [pc, #108]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d036      	beq.n	80023a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d016      	beq.n	8002370 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <HAL_RCC_OscConfig+0x248>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002348:	f7ff fc16 	bl	8001b78 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002350:	f7ff fc12 	bl	8001b78 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e167      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <HAL_RCC_OscConfig+0x240>)
 8002364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x200>
 800236e:	e01b      	b.n	80023a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002370:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <HAL_RCC_OscConfig+0x248>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002376:	f7ff fbff 	bl	8001b78 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	e00e      	b.n	800239c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237e:	f7ff fbfb 	bl	8001b78 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d907      	bls.n	800239c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e150      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
 8002390:	40023800 	.word	0x40023800
 8002394:	42470000 	.word	0x42470000
 8002398:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239c:	4b88      	ldr	r3, [pc, #544]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 800239e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1ea      	bne.n	800237e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 8097 	beq.w	80024e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b6:	2300      	movs	r3, #0
 80023b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ba:	4b81      	ldr	r3, [pc, #516]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10f      	bne.n	80023e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	4b7d      	ldr	r3, [pc, #500]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	4a7c      	ldr	r2, [pc, #496]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 80023d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d6:	4b7a      	ldr	r3, [pc, #488]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e2:	2301      	movs	r3, #1
 80023e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e6:	4b77      	ldr	r3, [pc, #476]	@ (80025c4 <HAL_RCC_OscConfig+0x474>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d118      	bne.n	8002424 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f2:	4b74      	ldr	r3, [pc, #464]	@ (80025c4 <HAL_RCC_OscConfig+0x474>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a73      	ldr	r2, [pc, #460]	@ (80025c4 <HAL_RCC_OscConfig+0x474>)
 80023f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023fe:	f7ff fbbb 	bl	8001b78 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002406:	f7ff fbb7 	bl	8001b78 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e10c      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	4b6a      	ldr	r3, [pc, #424]	@ (80025c4 <HAL_RCC_OscConfig+0x474>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x2ea>
 800242c:	4b64      	ldr	r3, [pc, #400]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 800242e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002430:	4a63      	ldr	r2, [pc, #396]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6713      	str	r3, [r2, #112]	@ 0x70
 8002438:	e01c      	b.n	8002474 <HAL_RCC_OscConfig+0x324>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b05      	cmp	r3, #5
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x30c>
 8002442:	4b5f      	ldr	r3, [pc, #380]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002446:	4a5e      	ldr	r2, [pc, #376]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	6713      	str	r3, [r2, #112]	@ 0x70
 800244e:	4b5c      	ldr	r3, [pc, #368]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002452:	4a5b      	ldr	r2, [pc, #364]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6713      	str	r3, [r2, #112]	@ 0x70
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0x324>
 800245c:	4b58      	ldr	r3, [pc, #352]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002460:	4a57      	ldr	r2, [pc, #348]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002462:	f023 0301 	bic.w	r3, r3, #1
 8002466:	6713      	str	r3, [r2, #112]	@ 0x70
 8002468:	4b55      	ldr	r3, [pc, #340]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800246c:	4a54      	ldr	r2, [pc, #336]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 800246e:	f023 0304 	bic.w	r3, r3, #4
 8002472:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d015      	beq.n	80024a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247c:	f7ff fb7c 	bl	8001b78 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002482:	e00a      	b.n	800249a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002484:	f7ff fb78 	bl	8001b78 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e0cb      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249a:	4b49      	ldr	r3, [pc, #292]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0ee      	beq.n	8002484 <HAL_RCC_OscConfig+0x334>
 80024a6:	e014      	b.n	80024d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a8:	f7ff fb66 	bl	8001b78 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b0:	f7ff fb62 	bl	8001b78 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e0b5      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c6:	4b3e      	ldr	r3, [pc, #248]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1ee      	bne.n	80024b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024d2:	7dfb      	ldrb	r3, [r7, #23]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d105      	bne.n	80024e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d8:	4b39      	ldr	r3, [pc, #228]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 80024da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024dc:	4a38      	ldr	r2, [pc, #224]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 80024de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80a1 	beq.w	8002630 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ee:	4b34      	ldr	r3, [pc, #208]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d05c      	beq.n	80025b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d141      	bne.n	8002586 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002502:	4b31      	ldr	r3, [pc, #196]	@ (80025c8 <HAL_RCC_OscConfig+0x478>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7ff fb36 	bl	8001b78 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002510:	f7ff fb32 	bl	8001b78 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e087      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002522:	4b27      	ldr	r3, [pc, #156]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69da      	ldr	r2, [r3, #28]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	019b      	lsls	r3, r3, #6
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002544:	085b      	lsrs	r3, r3, #1
 8002546:	3b01      	subs	r3, #1
 8002548:	041b      	lsls	r3, r3, #16
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002550:	061b      	lsls	r3, r3, #24
 8002552:	491b      	ldr	r1, [pc, #108]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002558:	4b1b      	ldr	r3, [pc, #108]	@ (80025c8 <HAL_RCC_OscConfig+0x478>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7ff fb0b 	bl	8001b78 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002566:	f7ff fb07 	bl	8001b78 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e05c      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002578:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x416>
 8002584:	e054      	b.n	8002630 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002586:	4b10      	ldr	r3, [pc, #64]	@ (80025c8 <HAL_RCC_OscConfig+0x478>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7ff faf4 	bl	8001b78 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002594:	f7ff faf0 	bl	8001b78 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e045      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_RCC_OscConfig+0x470>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x444>
 80025b2:	e03d      	b.n	8002630 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e038      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40007000 	.word	0x40007000
 80025c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025cc:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <HAL_RCC_OscConfig+0x4ec>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d028      	beq.n	800262c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d121      	bne.n	800262c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d11a      	bne.n	800262c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025fc:	4013      	ands	r3, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002602:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002604:	4293      	cmp	r3, r2
 8002606:	d111      	bne.n	800262c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002612:	085b      	lsrs	r3, r3, #1
 8002614:	3b01      	subs	r3, #1
 8002616:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d107      	bne.n	800262c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002626:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800

08002640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0cc      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002654:	4b68      	ldr	r3, [pc, #416]	@ (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d90c      	bls.n	800267c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b65      	ldr	r3, [pc, #404]	@ (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b63      	ldr	r3, [pc, #396]	@ (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0b8      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d020      	beq.n	80026ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002694:	4b59      	ldr	r3, [pc, #356]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a58      	ldr	r2, [pc, #352]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800269e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ac:	4b53      	ldr	r3, [pc, #332]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4a52      	ldr	r2, [pc, #328]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b8:	4b50      	ldr	r3, [pc, #320]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	494d      	ldr	r1, [pc, #308]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d044      	beq.n	8002760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b47      	ldr	r3, [pc, #284]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d119      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e07f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fe:	4b3f      	ldr	r3, [pc, #252]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e06f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270e:	4b3b      	ldr	r3, [pc, #236]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e067      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800271e:	4b37      	ldr	r3, [pc, #220]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f023 0203 	bic.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4934      	ldr	r1, [pc, #208]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	4313      	orrs	r3, r2
 800272e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002730:	f7ff fa22 	bl	8001b78 <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	e00a      	b.n	800274e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002738:	f7ff fa1e 	bl	8001b78 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e04f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	4b2b      	ldr	r3, [pc, #172]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 020c 	and.w	r2, r3, #12
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	429a      	cmp	r2, r3
 800275e:	d1eb      	bne.n	8002738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002760:	4b25      	ldr	r3, [pc, #148]	@ (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d20c      	bcs.n	8002788 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b22      	ldr	r3, [pc, #136]	@ (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b20      	ldr	r3, [pc, #128]	@ (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e032      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002794:	4b19      	ldr	r3, [pc, #100]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4916      	ldr	r1, [pc, #88]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027b2:	4b12      	ldr	r3, [pc, #72]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	490e      	ldr	r1, [pc, #56]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027c6:	f000 f821 	bl	800280c <HAL_RCC_GetSysClockFreq>
 80027ca:	4602      	mov	r2, r0
 80027cc:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	490a      	ldr	r1, [pc, #40]	@ (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	5ccb      	ldrb	r3, [r1, r3]
 80027da:	fa22 f303 	lsr.w	r3, r2, r3
 80027de:	4a09      	ldr	r2, [pc, #36]	@ (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027e2:	4b09      	ldr	r3, [pc, #36]	@ (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff f982 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023c00 	.word	0x40023c00
 80027fc:	40023800 	.word	0x40023800
 8002800:	08002a2c 	.word	0x08002a2c
 8002804:	20000008 	.word	0x20000008
 8002808:	2000000c 	.word	0x2000000c

0800280c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800280c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002810:	b090      	sub	sp, #64	@ 0x40
 8002812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	637b      	str	r3, [r7, #52]	@ 0x34
 8002818:	2300      	movs	r3, #0
 800281a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800281c:	2300      	movs	r3, #0
 800281e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002824:	4b59      	ldr	r3, [pc, #356]	@ (800298c <HAL_RCC_GetSysClockFreq+0x180>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d00d      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x40>
 8002830:	2b08      	cmp	r3, #8
 8002832:	f200 80a1 	bhi.w	8002978 <HAL_RCC_GetSysClockFreq+0x16c>
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x34>
 800283a:	2b04      	cmp	r3, #4
 800283c:	d003      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x3a>
 800283e:	e09b      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002840:	4b53      	ldr	r3, [pc, #332]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x184>)
 8002842:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002844:	e09b      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002846:	4b53      	ldr	r3, [pc, #332]	@ (8002994 <HAL_RCC_GetSysClockFreq+0x188>)
 8002848:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800284a:	e098      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800284c:	4b4f      	ldr	r3, [pc, #316]	@ (800298c <HAL_RCC_GetSysClockFreq+0x180>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002854:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002856:	4b4d      	ldr	r3, [pc, #308]	@ (800298c <HAL_RCC_GetSysClockFreq+0x180>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d028      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002862:	4b4a      	ldr	r3, [pc, #296]	@ (800298c <HAL_RCC_GetSysClockFreq+0x180>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	2200      	movs	r2, #0
 800286a:	623b      	str	r3, [r7, #32]
 800286c:	627a      	str	r2, [r7, #36]	@ 0x24
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002874:	2100      	movs	r1, #0
 8002876:	4b47      	ldr	r3, [pc, #284]	@ (8002994 <HAL_RCC_GetSysClockFreq+0x188>)
 8002878:	fb03 f201 	mul.w	r2, r3, r1
 800287c:	2300      	movs	r3, #0
 800287e:	fb00 f303 	mul.w	r3, r0, r3
 8002882:	4413      	add	r3, r2
 8002884:	4a43      	ldr	r2, [pc, #268]	@ (8002994 <HAL_RCC_GetSysClockFreq+0x188>)
 8002886:	fba0 1202 	umull	r1, r2, r0, r2
 800288a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800288c:	460a      	mov	r2, r1
 800288e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002890:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002892:	4413      	add	r3, r2
 8002894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002898:	2200      	movs	r2, #0
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	61fa      	str	r2, [r7, #28]
 800289e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80028a6:	f7fe f915 	bl	8000ad4 <__aeabi_uldivmod>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4613      	mov	r3, r2
 80028b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028b2:	e053      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b4:	4b35      	ldr	r3, [pc, #212]	@ (800298c <HAL_RCC_GetSysClockFreq+0x180>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	099b      	lsrs	r3, r3, #6
 80028ba:	2200      	movs	r2, #0
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	617a      	str	r2, [r7, #20]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028c6:	f04f 0b00 	mov.w	fp, #0
 80028ca:	4652      	mov	r2, sl
 80028cc:	465b      	mov	r3, fp
 80028ce:	f04f 0000 	mov.w	r0, #0
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	0159      	lsls	r1, r3, #5
 80028d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028dc:	0150      	lsls	r0, r2, #5
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	ebb2 080a 	subs.w	r8, r2, sl
 80028e6:	eb63 090b 	sbc.w	r9, r3, fp
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028fe:	ebb2 0408 	subs.w	r4, r2, r8
 8002902:	eb63 0509 	sbc.w	r5, r3, r9
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	00eb      	lsls	r3, r5, #3
 8002910:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002914:	00e2      	lsls	r2, r4, #3
 8002916:	4614      	mov	r4, r2
 8002918:	461d      	mov	r5, r3
 800291a:	eb14 030a 	adds.w	r3, r4, sl
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	eb45 030b 	adc.w	r3, r5, fp
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002932:	4629      	mov	r1, r5
 8002934:	028b      	lsls	r3, r1, #10
 8002936:	4621      	mov	r1, r4
 8002938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800293c:	4621      	mov	r1, r4
 800293e:	028a      	lsls	r2, r1, #10
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002946:	2200      	movs	r2, #0
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	60fa      	str	r2, [r7, #12]
 800294c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002950:	f7fe f8c0 	bl	8000ad4 <__aeabi_uldivmod>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4613      	mov	r3, r2
 800295a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800295c:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <HAL_RCC_GetSysClockFreq+0x180>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	3301      	adds	r3, #1
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800296c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800296e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002970:	fbb2 f3f3 	udiv	r3, r2, r3
 8002974:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002976:	e002      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002978:	4b05      	ldr	r3, [pc, #20]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x184>)
 800297a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800297c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800297e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002980:	4618      	mov	r0, r3
 8002982:	3740      	adds	r7, #64	@ 0x40
 8002984:	46bd      	mov	sp, r7
 8002986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800
 8002990:	00f42400 	.word	0x00f42400
 8002994:	00b71b00 	.word	0x00b71b00

08002998 <memset>:
 8002998:	4402      	add	r2, r0
 800299a:	4603      	mov	r3, r0
 800299c:	4293      	cmp	r3, r2
 800299e:	d100      	bne.n	80029a2 <memset+0xa>
 80029a0:	4770      	bx	lr
 80029a2:	f803 1b01 	strb.w	r1, [r3], #1
 80029a6:	e7f9      	b.n	800299c <memset+0x4>

080029a8 <__libc_init_array>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4d0d      	ldr	r5, [pc, #52]	@ (80029e0 <__libc_init_array+0x38>)
 80029ac:	4c0d      	ldr	r4, [pc, #52]	@ (80029e4 <__libc_init_array+0x3c>)
 80029ae:	1b64      	subs	r4, r4, r5
 80029b0:	10a4      	asrs	r4, r4, #2
 80029b2:	2600      	movs	r6, #0
 80029b4:	42a6      	cmp	r6, r4
 80029b6:	d109      	bne.n	80029cc <__libc_init_array+0x24>
 80029b8:	4d0b      	ldr	r5, [pc, #44]	@ (80029e8 <__libc_init_array+0x40>)
 80029ba:	4c0c      	ldr	r4, [pc, #48]	@ (80029ec <__libc_init_array+0x44>)
 80029bc:	f000 f826 	bl	8002a0c <_init>
 80029c0:	1b64      	subs	r4, r4, r5
 80029c2:	10a4      	asrs	r4, r4, #2
 80029c4:	2600      	movs	r6, #0
 80029c6:	42a6      	cmp	r6, r4
 80029c8:	d105      	bne.n	80029d6 <__libc_init_array+0x2e>
 80029ca:	bd70      	pop	{r4, r5, r6, pc}
 80029cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d0:	4798      	blx	r3
 80029d2:	3601      	adds	r6, #1
 80029d4:	e7ee      	b.n	80029b4 <__libc_init_array+0xc>
 80029d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029da:	4798      	blx	r3
 80029dc:	3601      	adds	r6, #1
 80029de:	e7f2      	b.n	80029c6 <__libc_init_array+0x1e>
 80029e0:	08002a44 	.word	0x08002a44
 80029e4:	08002a44 	.word	0x08002a44
 80029e8:	08002a44 	.word	0x08002a44
 80029ec:	08002a48 	.word	0x08002a48

080029f0 <memcpy>:
 80029f0:	440a      	add	r2, r1
 80029f2:	4291      	cmp	r1, r2
 80029f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80029f8:	d100      	bne.n	80029fc <memcpy+0xc>
 80029fa:	4770      	bx	lr
 80029fc:	b510      	push	{r4, lr}
 80029fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a06:	4291      	cmp	r1, r2
 8002a08:	d1f9      	bne.n	80029fe <memcpy+0xe>
 8002a0a:	bd10      	pop	{r4, pc}

08002a0c <_init>:
 8002a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0e:	bf00      	nop
 8002a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a12:	bc08      	pop	{r3}
 8002a14:	469e      	mov	lr, r3
 8002a16:	4770      	bx	lr

08002a18 <_fini>:
 8002a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1a:	bf00      	nop
 8002a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a1e:	bc08      	pop	{r3}
 8002a20:	469e      	mov	lr, r3
 8002a22:	4770      	bx	lr
